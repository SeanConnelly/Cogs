<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2014.1.1 (Build 702U)" ts="2017-07-17 15:41:35">
<Class name="Cogs.JsonClass">
<Description>
</Description>
<PropertyClass>Cogs.Lib.Json.Params</PropertyClass>
<Super>Cogs.Lib.Json.ClassSerializer,Cogs.Lib.Json.ClassDeserializer</Super>
<TimeChanged>64434,59166.938098</TimeChanged>
<TimeCreated>63949,41076.823273</TimeCreated>
</Class>


<Class name="Cogs.Lib.Json.Base">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64441,58621.49736</TimeChanged>
<TimeCreated>63949,40322.004384</TimeCreated>

<Method name="EscapeJSON">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>string:%String,escapeSolidus:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set x=%code
	set hasJSON=0
	try {
		set hasJSON=($system.Version.GetMajor()>2015)||($system.Version.GetMajor()=2015&&$system.Version.GetMinor()=2)	
	} catch err {
	}
	if hasJSON {
		d x.WriteLine(" quit $zcvt(string,""O"",""JSON"")")
	} else {
		d x.WriteLine(" set string=$replace(string,$C(0),"""")")
		d x.WriteLine(" set string=$replace(string,""\"",""\\"")")
		d x.WriteLine(" if escapeSolidus=1 Set string=$replace(string,""/"",""\/"")")
		d x.WriteLine(" set string=$replace(string,"""""""",""\"""""")")
		d x.WriteLine(" set string=$replace(string,$C(8),""\b"")")
		d x.WriteLine(" set string=$replace(string,$C(9),""\t"")")
		d x.WriteLine(" set string=$replace(string,$C(10),""\n"")")
		d x.WriteLine(" set string=$replace(string,$C(12),""\f"")")
		d x.WriteLine(" set string=$replace(string,$C(13),""\r"")")
		d x.WriteLine(" quit string")		
	}
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.ClassDeserializer">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64481,44032.321316</TimeChanged>
<TimeCreated>63949,44964.56539</TimeCreated>

<Method name="parseJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&json:%String,wrapper:%String=""]]></FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[	quit ..parseObject(json,$find(json,"{",$s(wrapper'="":$f(json,wrapper),1:1)),$length(json))
]]></Implementation>
</Method>

<Method name="parseObject">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&json:%String,&p:%Integer=1,&l:%Integer=0]]></FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	set (c,pre,string,str,name,ctype,cname)="",ob=..%New()
	for p=p:1:l {
		set ct=$e(json,p) if ((ct=" ")||(ct'?1ANP)),'string continue
		set pre=c,c=ct
		if "\"=pre set str=$e(str,1,$l(str)-1)_$s("""/\"[c:c,c="b":$c(8),c="t":$c(9),c="r":$c(13),c="f":$c(12),1:$c(10)),(pre,c)="" continue
		if """"=c,"\"'=pre set string=$s(string:0,1:1) continue
		if string set str=str_c continue
		if ":"=c set name=$method(ob,"bakedJsonName",str),str="" continue
		if ("["=c),("]"=pre) set name="" continue
		if "{"=c {
			if ctype="" set ctype=$method(ob,"bakedCType",name)
			if "%Collection.ArrayOfDT"=ctype set cname=name continue
			if "%Collection.ListOfObj"=ctype set sc=$method($property(ob,cname),"Insert",$method(ob,"bakedDelegator",cname,.json,.p,.l)) continue
			if "%Collection.ArrayOfObj"=ctype,(cname'="") set sc=$method($property(ob,cname),"SetAt",$method(ob,"bakedDelegator",cname,.json,.p,.l),name) continue 
			if "%Collection.ArrayOfObj"=ctype,cname="" set cname=name continue
			set $property(ob,name)=$method(ob,"bakedDelegator",name,.json,.p,.l) continue
		}
		if ((c=",")!(c="}")!(c="]")) {
			if ((pre="}")||(pre="]")&&(c'="}")) continue
			if "%Collection.ListOfDT"=ctype {
				if '((pre="[")&&(c="]")) set sc=$method($property(ob,cname),"Insert",$method(ob,"normaliseValue",cname,str,pre=""""))
			} elseif "%Collection.ArrayOfDT"=ctype {
				if name'=cname set sc=$method($property(ob,cname),"SetAt",$method(ob,"normaliseValue",cname,str,pre=""""),name)
			} else {
				if str'="" if "{["'[pre set $property(ob,name)=$method(ob,"normaliseValue",name,str,pre="""")
			}
			if ("}"=c),(ctype="") g END
			if ("]"=c)!("}"=c) set (cname,ctype)=""
			set (name,str)="" continue
		}
		if "["=c set ctype=$method(ob,"bakedCType",name),cname=name,(name,str)="" continue
		if "}"=c quit
		set str=str_c
	}
END
	quit ob
]]></Implementation>
</Method>

<Method name="bakedDelegator">
<Internal>1</Internal>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[pname:%String,&json:%String,&p:%Integer,&l:%Integer]]></FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	for pc=1:1:%compiledclass.Properties.Count() {
		set pr=%compiledclass.Properties.GetAt(pc)
		if pr.Type?1A1.ANP do %code.WriteLine(" if """_pr.Name_"""=pname set p=p+1 quit ##class("_pr.Type_").parseObject(.json,.p,.l)")	
	}
	do %code.WriteLine(" quit """"")
	quit 1
]]></Implementation>
</Method>

<Method name="bakedCType">
<Internal>1</Internal>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pname:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	for pc=1:1:%compiledclass.Properties.Count() {
		set pr=%compiledclass.Properties.GetAt(pc)
		if (pr.Collection="array")!(pr.Collection="list") do %code.WriteLine(" if """_pr.Name_"""=pname quit """_pr.RuntimeType_"""")	
	}
	do %code.WriteLine(" quit """"")
	quit 1
]]></Implementation>
</Method>

<Method name="bakedJsonName">
<Internal>1</Internal>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pname:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	for pc=1:1:%compiledclass.Properties.Count() {
		set pr=%compiledclass.Properties.GetAt(pc)
		if pr.Parameters.GetAt("JSONNAME")'="" do %code.WriteLine(" if """_pr.Parameters.GetAt("JSONNAME")_"""=pname quit """_pr.Name_"""")
	}
	do %code.WriteLine(" quit pname")
	quit 1
]]></Implementation>
</Method>

<Method name="normaliseValue">
<Internal>1</Internal>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pname:%String,pval,quoted</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	for pc=1:1:%compiledclass.Properties.Count() {
		set pr=%compiledclass.Properties.GetAt(pc)
		if "%Library.String"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(quoted:pval,pval=""null"":$c(0),1:pval)")
		if "%Library.Date"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""null"":"""",1:$zdh($e(pval,1,10),3,,,,,,,$c(0)))")
		if "%Library.Time"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""null"":"""",1:$zth(pval))")
		if "%Library.TimeStamp"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""null"":"""",1:$p($tr(pval,""TZ"","" ""),""+""))")
		if "%Library.Boolean"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""true"":1,pval=""false"":0,""01""[pval:pval,1:"""")")
		if "%Library.Float %Library.Integer %Library.Numeric %Library.Currency"[pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""null"":"""",1:pval)")
	}
	do %code.WriteLine(" quit pval")
	quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.ClassSerializer">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Lib.Json.Base</Super>
<TimeChanged>64481,43474.123798</TimeChanged>
<TimeCreated>63949,44967.513209</TimeCreated>

<Method name="toJSON">
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[parent="",&seen=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set x=%code
	d x.WriteLine(" if $g(seen($THIS))=1 set ^debug2($zh,$THIS)=1 quit ""{}""")
	d x.WriteLine(" set seen($THIS)=1")
	d x.WriteLine(" if $g(parent)'="""" set j=""{""""""_parent_"""""":""")
	d x.WriteLine(" set j=$g(j)_""{""")
	set co="",cc=0
	for i=1:1:%compiledclass.Properties.Count() {
		set p=%compiledclass.Properties.GetAt(i),name=p.Name
		if p.Parameters.GetAt("JSONIGNORE")=1 continue
		if $e(p.Name)'?1A continue
		if p.RuntimeType="%Library.RelationshipObject" continue
		if cc>0 set co=","
		set cc=cc+1
		if p.Parameters.GetAt("JSONNAME")'="" set name=p.Parameters.GetAt("JSONNAME")
		if p.Parameters.GetAt("JSONMETHOD")'="" {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":""""""_"_p.Parameters.GetAt("JSONMETHOD")_"_""""""""")
			continue
		}
		if "%Collection.ArrayOfDT"=p.RuntimeType {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":{"",c2="""",key=.."_p.Name_".Next("""")")
			d x.WriteLine(" while key'="""" {")
			d x.WriteLine("  set value=.."_p.Name_".GetAt(key)")
			d x.WriteLine("  Set j=j_c2_""""""""_key_""""""""_"":""_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type)_")")
			d x.WriteLine("  set key=.."_p.Name_".Next(key),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" set j=j_""}""")
			continue						
		}
		if "%Collection.ArrayOfObj"=p.RuntimeType {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":{"",c2="""",key=.."_p.Name_".Next("""")")
			d x.WriteLine(" while key'="""" {")
			d x.WriteLine("  set o=.."_p.Name_".GetAt(key)")
			d x.WriteLine("   set j=j_c2_""""""""_key_""""""""_"":""_o.toJSON(,.seen),c2="",""")
			d x.WriteLine("  set key=.."_p.Name_".Next(key),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" set j=j_""}""")
			continue					
		}
		if "%Collection.ListOfDT"=p.RuntimeType {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":["",c2=""""")
			d x.WriteLine(" for i=1:1:.."_p.Name_".Count() {")
			d x.WriteLine("  set value=.."_p.Name_".GetAt(i)")
			d x.WriteLine("  set j=j_c2_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type)_"),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" set j=j_""]""")
			continue					
		}
		if "%Collection.ListOfObj"=p.RuntimeType {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":["",c2=""""")
			d x.WriteLine(" for i=1:1:.."_p.Name_".Count() {")
			d x.WriteLine("  set obj=.."_p.Name_".GetAt(i)")
			d x.WriteLine("  set j=j_c2_obj.toJSON(,.seen),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" set j=j_""]""")
			continue					
		}
		d x.WriteLine(" set value=.."_p.Name)
		d x.WriteLine(" Set j=j_"""_co_""""""_name_""""":""_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type)_")")
	}
	d x.WriteLine(" set j=j_""}""")
	d x.WriteLine(" if $g(parent)'="""" set j=j_""}""")
	d x.WriteLine(" kill seen($THIS)")
	d x.WriteLine(" quit j")
	quit 1
]]></Implementation>
</Method>

<Method name="outputJSON">
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[parent="",&seen=""]]></FormalSpec>
<Implementation><![CDATA[
	set x=%code
	d x.WriteLine(" if $g(seen($THIS))=1 write ""{}""")
	d x.WriteLine(" set seen($THIS)=1")
	d x.WriteLine(" if $g(parent)'="""" write ""{""""""_parent_"""""":""")
	d x.WriteLine(" write ""{""")
	set co="",cc=0
	for i=1:1:%compiledclass.Properties.Count() {
		set p=%compiledclass.Properties.GetAt(i),name=p.Name
		if p.Parameters.GetAt("JSONIGNORE")=1 continue
		if $e(p.Name)'?1A continue
		if p.RuntimeType="%Library.RelationshipObject" continue
		if cc>0 set co=","
		set cc=cc+1
		if p.Parameters.GetAt("JSONNAME")'="" set name=p.Parameters.GetAt("JSONNAME")
		if p.Parameters.GetAt("JSONMETHOD")'="" {
			d x.WriteLine(" write """_co_""""""_name_""""":""""""_"_p.Parameters.GetAt("JSONMETHOD")_"_""""""""")
			continue
		}
		if "%Collection.ArrayOfDT"=p.RuntimeType {
			d x.WriteLine(" write """_co_""""""_name_""""":{"" set c2="""",key=.."_p.Name_".Next("""")")
			d x.WriteLine(" while key'="""" {")
			d x.WriteLine("  set value=.."_p.Name_".GetAt(key)")
			d x.WriteLine("  write c2_""""""""_key_""""""""_"":""_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type,1)_")")
			d x.WriteLine("  set key=.."_p.Name_".Next(key),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" write ""}""")
			continue						
		}
		if "%Collection.ArrayOfObj"=p.RuntimeType {
			d x.WriteLine(" write """_co_""""""_name_""""":{"" set c2="""",key=.."_p.Name_".Next("""")")
			d x.WriteLine(" while key'="""" {")
			d x.WriteLine("  set o=.."_p.Name_".GetAt(key)")
			d x.WriteLine("   write c2_""""""""_key_""""""""_"":"" write o.outputJSON(,.seen) set c2="",""")
			d x.WriteLine("  set key=.."_p.Name_".Next(key),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" write ""}""")
			continue					
		}
		if "%Collection.ListOfDT"=p.RuntimeType {
			d x.WriteLine(" write """_co_""""""_name_""""":["" set c2=""""")
			d x.WriteLine(" for i=1:1:.."_p.Name_".Count() {")
			d x.WriteLine("  set value=.."_p.Name_".GetAt(i)")
			d x.WriteLine("  write c2_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type,1)_") set c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" write ""]""")
			continue					
		}
		if "%Collection.ListOfObj"=p.RuntimeType {
			d x.WriteLine(" write """_co_""""""_name_""""":["" set c2=""""")
			d x.WriteLine(" for i=1:1:.."_p.Name_".Count() {")
			d x.WriteLine("  set obj=.."_p.Name_".GetAt(i)")
			d x.WriteLine("  write c2 write obj.outputJSON(,.seen) set c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" write ""]""")
			continue					
		}
		d x.WriteLine(" set value=.."_p.Name)
		d x.WriteLine(" write """_co_""""""_name_""""":"" write $s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type,1)_")")
	}
	d x.WriteLine(" write ""}""")
	d x.WriteLine(" if $g(parent)'="""" write ""}""")
	d x.WriteLine(" kill seen($THIS)")
	d x.WriteLine(" quit """"")
	quit 1
]]></Implementation>
</Method>

<Method name="getTypeWriter">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>type,mode=0</FormalSpec>
<Implementation><![CDATA[
	set quotes=""""""""""
	if "Cogs.Lib.Types.Json"=type q "$Select(value'="""":value,1:"""""""""""")"
	if "%Library.Time"=type q "$s(value'="""":"_quotes_"_$zt(value)_"_quotes_",1:""null"")"
	if "%Library.Date"=type q "$s(value'="""":"_quotes_"_$zd(value,3)_"_quotes_",1:""null"")"
	//if "%Library.TimeStamp"=type q "$s(value'="""":"_quotes_"_$p(value,"" "",1)_""T""_$p(value,"" "",2)_"_quotes_",1:""null"")"
	if "%Library.TimeStamp"=type q "$s(value'="""":"_quotes_"_$tr(value,"" "",""T"")_""Z""_"_quotes_",1:""null"")"
	if "%Library.Boolean"=type q "$s(value=1:""true"",value=0:""false"",1:""null"")"
	if "%Library.Float %Library.Integer %Library.Numeric %Library.Currency"[type q "$s($e(value,1,2)=""0."":value,$e(value,1)=""."":""0""_value,""0""=$e(value,1):""""""""_value_"""""""",value'="""":+value,1:""null"")"
	if "%"=$e(type) q quotes_"_..EscapeJSON(value)_"_quotes
	if mode=1 quit "$s($IsObject(value):value.outputJSON(,.seen),value="""":$C(34,34),1:"_quotes_"_..EscapeJSON(value)_"_quotes_")"
	quit "$s($IsObject(value):value.toJSON(,.seen),value="""":$C(34,34),1:"_quotes_"_..EscapeJSON(value)_"_quotes_")"
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Docs.JsonBenchmarks">
<Description>
to view document click the green globe button thats about ^^^^ here</Description>
<Super>Cogs.Bookshelf.Page</Super>
<TimeChanged>64444,68864.056845</TimeChanged>
<TimeCreated>64376,51321.947171</TimeCreated>

<XData name="Page">
<Data><![CDATA[
<object className="Cogs.Bookshelf.PageMeta">
<BookName>Cogs.Lib.Json</BookName>
<PageName>JSON Benchmarks</PageName>
<ClassName>Cogs.Lib.Json.Docs.JsonBenchmarks</ClassName>
<PageIndex>3</PageIndex>
<PageContents>IyMgSlNPTiBCZW5jaG1hcmtzCgo=</PageContents>
</object>
]]></Data>
</XData>
</Class>


<Class name="Cogs.Lib.Json.Docs.Jsonclass">
<Description>
to view document click the green globe button thats about ^^^^ here</Description>
<Super>Cogs.Bookshelf.Page</Super>
<TimeChanged>64481,49551.97333</TimeChanged>
<TimeCreated>64376,51321.947171</TimeCreated>

<XData name="Page">
<Data><![CDATA[
<object className="Cogs.Bookshelf.PageMeta">
<BookName>Cogs.Lib.Json</BookName>
<PageName>JsonClass</PageName>
<ClassName>Cogs.Lib.Json.Docs.Jsonclass</ClassName>
<PageIndex>2</PageIndex>
<PageContents>IyMgQ29ncy5Kc29uQ2xhc3MKDQoNQ29ncy5Kc29uQ2xhc3MgZW5hYmxlcyBzZXJpYWxpc2F0aW9u
IGFuZCBkZXJzZXJpYWxpc2F0aW9uIG9mIEpTT04gdG8gYW5kIGZyb20gcmVnaXN0ZXJlZCBhbmQg
cGVyc2lzdGVudCBDYWNoZSBjbGFzc2VzLgoNCg0jIyMgU2ltcGxlIEV4YW1wbGUKDQoNVG8gdXNl
IHRoZSBDb2dzLkpzb25DbGFzcywgdGFrZSBhbnkgZXhpc3RpbmcgcmVnaXN0ZXJlZCBvciBwZXJz
aXN0ZW50IGNsYXNzIGFuZCBleHRlbmQgaXQgd2l0aCBDb2dzLkpzb25DbGFzcy4KDQoNYGBgQ09T
Cg1DbGFzcyBFeGFtcGxlLlBlcnNvbiBFeHRlbmRzICglUGVyc2lzdGVudCwgQ29ncy5Kc29uQ2xh
c3MpCg17Cg0KDVByb3BlcnR5IEZpcnN0TmFtZSBBcyAlU3RyaW5nOwoNCg1Qcm9wZXJ0eSBMYXN0
TmFtZSBBcyAlU3RyaW5nOwoNCg1Qcm9wZXJ0eSBEYXRlT2ZCaXJ0aCBBcyAlRGF0ZShKU09OTkFN
RSA9ICJCaXJ0aERhdGUiKTsKDQoNUHJvcGVydHkgU2VjcmV0IEFzICVTdHJpbmcoSlNPTklHTk9S
RSA9IDEpOwoNCg1Qcm9wZXJ0eSBIb2JiaWVzIEFzIGxpc3QgT2YgJVN0cmluZzsKDQoNfQoNYGBg
Cg0KDVRoZSBwZXJzb24gY2xhc3Mgbm93IGluaGVyaXRzIHR3byBtZXRob2RzLCB0b0pTT04oKSBh
bmQgcGFyc2VKU09OKCkuCg0KDVdlIGNhbiBvcGVuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiBwZXJz
b24gYW5kIG91dHB1dCBpdHMgSlNPTiBzZXJpYWxpc2F0aW9uIHVzaW5nIGl0cyB0b0pTT04oKSBt
ZXRob2QuCg0KDWBgYENPUwoNc2V0IHBlcnNvbj0jI2NsYXNzKEV4YW1wbGUuUGVyc29uKS4lT3Bl
bklkKDEpCg13cml0ZSAhLHBlcnNvbi50b0pTT04oKQoNYGBgCg0KDWBgYEpTT04KDXsgIAoNICAg
IkJpcnRoRGF0ZSI6IjE5NzAtMDMtMjUiLAoNICAgIkZpcnN0TmFtZSI6IlNlYW4iLAoNICAgIkhv
YmJpZXMiOlsgIAoNICAgICAgIlBob3RvZ3JhcGh5IiwKDSAgICAgICJXYWxraW5nIiwKDSAgICAg
ICJGb290YmFsbCIKDSAgIF0sCg0gICAiTGFzdE5hbWUiOiJDb25uZWxseSIKDX0KDWBgYAoNCg1P
ciBjcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgcGVyc29uIGZyb20gYSBKU09OIHN0cmluZyB1c2lu
ZyBpdHMgcGFyc2VKU09OKCkgY2xhc3MgbWV0aG9kLgoNCg1gYGBKU09OCg1zZXQgcGVyc29uPSMj
Y2xhc3MoRXhhbXBsZS5QZXJzb24pLnBhcnNlSlNPTihqc29uKQoNc2V0IHNjPXBlcnNvbi4lU2F2
ZSgpCg1gYGAKDQoNIyMjIEF1dG9tYXRpYyBUeXBlIENvbnZlcnNpb25zCg0KDVRoZSBKU09OIHNw
ZWNpZmljYXRpb24gKGh0dHA6Ly93d3cuanNvbi5vcmcvKSBkZWZpbmVzIGEgbnVtYmVyIG9mIHR5
cGVzIHRoYXQgaW5jbHVkZSBvYmplY3QsIGFycmF5LCBzdHJpbmcsIG51bWJlciwgdHJ1ZSwgZmFs
c2UgYW5kIG51bGwuCg0KDVRoZSBKc29uQ2xhc3Mgd2lsbCBhdXRvbWF0aWNhbGx5IGNvbnZlcnQg
dGhlc2UgdHlwZXMgdG8gYW5kIGZyb20gaW50ZXJuYWwgdHlwZXMgd2l0aGluIENhY2jDqS4KDQoN
SW4gYWRkaXRpb24sIEpzb25DbGFzcyBhbHNvIGNvbnZlcnRzIHByb3BlcnRpZXMgdGhhdCBhcmUg
b2YgdHlwZSBUaW1lLCBEYXRlIGFuZCBUaW1lU3RhbXAuIFRoZXNlIGRhdGVzIGFuZCB0aW1lcyBt
dXN0IGJlIGluIFczQyBmb3JtYXQuCg0KDSogWVlZWS1NTS1ERFRoaDptbTpzcwoNKiBZWVlZLU1N
LURECg0qIGhoOm1tOnNzCg0KDWh0dHBzOi8vd3d3LnczLm9yZy9UUi9OT1RFLWRhdGV0aW1lCg0K
DU51bWJlcnMgKEZsb2F0LCBJbnRlZ2VyLCBOdW1lcmljLCBDdXJyZW5jeSkgYXJlIGF1dG9tYXRp
Y2FsbHkgY29udmVydGVkIHRvIGFuZCBmcm9tIEpTT04gbnVtYmVycy4gRXhjZXB0IGZvciBudW1i
ZXJzIHRoYXQgaGF2ZSBwcmVjZWRpbmcgemVybyAoZS5nLiAwMTIzKSwgaW4gdGhpcyBpbnN0YW5j
ZSB0aGV5IGFyZSBzZXJpYWxpc2VkIGFzIHN0cmluZ3MuCg0KDVByb3BlcnRpZXMgdGhhdCBhcmUg
b2YgdHlwZSBib29sZWFuIHdpbGwgYXV0byBjb252ZXJ0IHRydWUgdG8gMSBhbmQgZmFsc2UgdG8g
MCBhbmQgdmlzYSB2ZXJzYS4KDQoNVGhlIG51bGwgdHlwZSB3aWxsIGJlIGxvc3QgaW4gdHJhbnNs
YXRpb24gZm9yIGFsbCBwcm9wZXJ0eSB0eXBlcyBleGNlcHQgZm9yIHN0cmluZywgd2hlcmUgaXQg
d2lsbCBiZSBjb252ZXJ0ZWQgdG8gJGMoMCkuCg0KDSMjIyBPYmplY3QgUHJvcGVydGllcwoNCg1Q
cm9wZXJ0aWVzIHRoYXQgYXJlIGFuIG9iamVjdCBtdXN0IGltcGxlbWVudCBhIGNsYXNzIHRoYXQg
YWxzbyBleHRlbmRzIENvZ3MuSnNvbkNsYXNzLgoNCg1BIHNlcmlhbGlzYXRpb24gb3IgZGVzZXJp
YWxhdGlvbiBvZiB0aGUgcGFyZW50IGNsYXNzIHdpbGwgY2FzY2FkZSBkb3duIHRocm91Z2ggaXRz
IGNoaWxkIGNsYXNzLCBpdHMgY2hpbGRzIGNoaWxkcmVuIGFuZCBzbyBvbi4KDQoNIyMjIENhY2jD
qSBBcnJheXMgVHlwZQoNCg1DYWNow6kgdHlwZSBhcnJheXMgY29udGFpbiBrZXkgdmFsdWUgcGFp
cnMgYW5kIHdpbGwgYmUgcHJvamVjdGVkIHRvIEpTT04gYXMgaWYgaXQgd2FzIGFuIG9iamVjdC4K
DQoNYGBgQ09TCg0iQXJyYXlPZlN0cmluZyI6eyAgCg0gICAgICAiQUxQSEEiOiAiSGVsbG8iLAoN
ICAgICAgIkJSQVZPIjogIlNoZWRzIiwKDSAgICAgICJDSEFSTElFIjogIldvcmxkIiwKDSAgICAg
ICJERUxUQSI6ICJGb28iLAoNICAgICAgIkVDSE8iOiAiQmFyIgoNfQoNYGBgCg0KDUluIHJldmVy
c2UgYSBKU09OIGNoaWxkIG9iamVjdCBjb3VsZCBiZSBtYXBwZWQgdG8gYSBjb25jcmV0ZSBjaGls
ZCBjbGFzcywgb3IgcHJvamVjdGVkIGFzIGFuIGFycmF5LiBJZiB0aGUgb2JqZWN0IGlzIGxpa2Vs
eSB0byBncm93IG9yIGNoYW5nZSB0aGVuIHRoaXMgbWlnaHQgYmUgYSBnb29kIGdlbmVyaWMgb3B0
aW9uIHRvIHVzZS4KDQoNIyMjIENhY2jDqSBMaXN0cyBUeXBlCg0KDUNhY2jDqSBsaXN0cyB0eXBl
IGNvbnRhaW5zIGEgbGlzdCBvZiB2YWx1ZXMsIHRoZXNlIGFyZSBwcm9qZWN0ZWQgYXMgYW4gYXJy
YXkgb2YgdmFsdWVzIGluIEpTT04uCg0KDWBgYEpTT04KDSJMaXN0T2ZEYXRlcyI6WyAgCg0gICAg
ICAiMTk4MC0xMi0zMSIsCg0gICAgICAiMTk0MS0wMS0xMCIsCg0gICAgICAiMTk2OC0wNS0xOCIs
Cg0gICAgICAiMTkxNC0xMC0xNiIsCg0gICAgICAiMTk3OC0xMS0yNyIsCg0gICAgICAiMTk1MS0w
NC0xMCIsCg0gICAgICAiMTk5My0wOS0yNyIKDV0KDWBgYAoNCg0jIyMgQXJyYXlzIG9mIEFycmF5
cwoNCg1BcnJheXMgb2YgQXJyYXlzIGFyZSBhIHZhbGlkIEpTT04gY29uc3RydWN0IGJ1dCBjYW4g
bm90IGhhdmUgYSBsb2dpY2FsIG1hcHBpbmcgaW50byBhIGNsYXNzIHN0cnVjdHVyZS4KDQoNSWYg
eW91IG5lZWQgdG8gZGVzaWduIGEgc29sdXRpb24gYXJvdW5kIGV4aXN0aW5nIEpTT04gdGhhdCBo
YXMgYW4gYXJyYXkgb2YgYXJyYXlzIHRoZW4gdXNlIHRoZSBnZW5lcmljICpDb2dzLkpzb24gY2xh
c3MgdG8gc3BsaXQgdGhlIG91dGVyIGFycmF5IGFuZCB0aGVuIHByb2dyYW1hdGljYWxseSBhc3Np
Z24gdGhlIGlubmVyIGFycmF5cyBpbnRvIGFuIGFycmF5IG9mIG9iamVjdHMuCg0KDSpUaGlzIGNs
YXNzIGlzIGN1cnJlbnRseSBub3QgYXZhaWxhYmxlIGluIHRoaXMgcmVsZWFzZS4KDQoNIyMjIFN0
b3JpbmcgUmF3IEpTT04KDQoNQSBwcm9wZXJ0eSBjYW4gY29udGFpbiByYXcgSlNPTiBieSB1c2lu
ZyB0aGUgc3BlY2lhbCB0eXBlIENvZ3MuTGliLlR5cGVzLkpzb24KDQoNVGhlIENvZ3MuTGliLlR5
cGVzLkpzb24gdHlwZSBpcyBlc3NlbnRpYWxseSBhIHN0cmluZyB0eXBlIHdpdGggaXRzIG93biBK
U09OIHBhcnNlciBtZXRob2QuIFRoZSBtZXRob2Qgd2lsbCBzdHJpcCBvdXQgdGhlIEpTT04gcHJv
cGVydHkgYXMgYSByYXcgc3RyaW5nIGFuZCB3aWxsIGFzc2lnbiBpdCBhcyBhIHN0cmluZyB0byB0
aGUgb2JqZWN0IHByb3BlcnR5LiBUaGlzIHdpbGwgaW5jbHVkZSBhbGwgZGVzY2VuZGFudHMgb2Yg
dGhlIEpTT04gcHJvcGVydHkuCg0KDWBgYENPUwoNUHJvcGVydHkgU2NoZW1hRnJlZURhdGEgQXMg
Q29ncy5MaWIuVHlwZXMuSnNvbjsKDWBgYAoNCg0jIyMgT3ZlcmlkaW5nIEpTT04gcHJvcGVydHkg
bmFtZXMKDQoNVGhlIG5hbWUgcHJvdmlkZWQgZm9yIGEgSlNPTiBwcm9wZXJ0eSB3aWxsIGJlIGV4
YWN0bHkgdGhlIHNhbWUgbmFtZSBvZiBpdHMgdGFyZ2V0IHByb3BlcnR5IG5hbWUuCg0KDVRoaXMg
Y2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgSlNPTk5BTUUgYXR0cmlidXRlLiBBcHBseSB0aGlz
IGF0dHJpYnV0ZSB0byBhbnkgcHJvcGVydHkgYW5kIGl0cyBzdHJpbmcgdmFsdWUgd2lsbCBiZSB1
c2VkIGZvciBib3RoIHNlcmlhbGlzYXRpb24gYW5kIGRlc2VyaWFsc2F0aW9uIG9mIHRoZSBKU09O
LgoNCg1gYGBDT1MKDVByb3BlcnR5IERhdGVPZkJpcnRoIEFzICVEYXRlKEpTT05OQU1FID0gIkJp
cnRoRGF0ZSIpOwoNYGBgCg0KDSMjIyBLZWVwaW5nIHByb3BlcnRpZXMgYSBzZWNyZXQKDQoNV2hl
biBzZXJpYWxpc2luZyBhIGNsYXNzIHRoZXJlIG1pZ2h0IGJlIG9uZSBvciBtb3JlIHByb3BlcnRp
ZXMgdGhhdCBzaG91bGQgbm90IGJlIHByb2plY3RlZCB0byB0aGUgY29uc3VtZXIuCg0KDVNpbXBs
eSBhZGQgYSBKU09OSUdOT1JFPTEgYXR0cmlidXRlIHRvIHRoZSBwcm9wZXJ0eSBhbmQgdGhlIHBy
b3BlcnR5IHZhbHVlIHdpbGwgYmUga2VwdCBhIHNlY3JldC4KDQoNYGBgQ09TCg1Qcm9wZXJ0eSBT
ZWNyZXQgQXMgJVN0cmluZyhKU09OSUdOT1JFID0gMSk7Cg1gYGAKDQoNIyMjIE92ZXJyaWRpbmcg
dGhlIHZhbHVlIG9mIGEgcHJvcGVydHkKDQoNQW55IHByb3BlcnR5IHZhbHVlIGNhbiBiZSBvdmVy
cmlkZGVuIHVzaW5nIHRoZSBKU09OTUVUSE9EIGF0dHJpYnV0ZS4KDQoNYGBgQ09TCg1Qcm9wZXJ0
eSBaVGVzdEpzb25NZXRob2QgQXMgJVN0cmluZyhKU09OTUVUSE9EID0gIi4uVG9VcHBlciguLlRl
c3RMb25nU3RyaW5nKSIpOwoNYGBgCg0KDVRoZSB2YWx1ZSBvZiBKU09OTUVUSE9EIHNob3VsZCBi
ZSB2YWxpZCBDT1MgY29kZSB0aGF0IGNhbiBiZSBhIGNhbGwgdG8gYSBtZXRob2Qgb3IgZnVuY3Rp
b24gcGFzc2luZyBpbiBvbmUgb3IgbW9yZSBvZiB0aGUgb2JqZWN0cyBwcm9wZXJ0eSB2YWx1ZXMu
Cg0KDU5vdGUgdGhhdCB0aGlzIG9ubHkgYXBwbGllcyB0byBzZXJpYWxpc2VkIHZhbHVlcy4KDQoN
IyMjIE1vcmUgZXhhbXBsZXMKDQoNVGFrZSBhIGxvb2sgYXQgdGhlIENvZ3MgdGVzdHMgZm9yIG1v
cmUgZXhhbXBsZXMuCg0=</PageContents>
</object>
]]></Data>
</XData>
</Class>




<Class name="Cogs.Lib.Json.Docs.Readme">
<Super>Cogs.Bookshelf.Page</Super>
<TimeChanged>64481,50079.389941</TimeChanged>
<TimeCreated>64376,51321.947171</TimeCreated>

<XData name="Page">
<Data><![CDATA[
<object className="Cogs.Bookshelf.PageMeta">
<BookName>Cogs.Lib.Json</BookName>
<PageName>README</PageName>
<ClassName>Cogs.Lib.Json.Docs.Readme</ClassName>
<PageIndex>1</PageIndex>
<PageContents>IyMgQ29ncyBMaWJyYXJ5DQ0NIyMjIEludHJvZHVjdGlvbg0NDUNvZ3MgaXMgYSBzbWFsbCBjb2Rl
IGxpYnJhcnkgdGhhdCBydW5zIG9uIEludGVyc3lzdGVtcyBDYWNow6kuDQ0NVGhlIENvZ3MgbGli
cmFyeSBjdXJyZW50bHkgcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSB0byBzZXJpYWxpc2UgYW5kIGRl
c2VyaWFsaXNlIEpTT04gdG8gYW5kIGZyb20gcmVnaXN0ZXJlZCBhbmQgcGVyc2lzdGVudCBDYWNo
w6kgY2xhc3Nlcy4NDQ0jIyMgRXhhbXBsZQ0NDUV4dGVuZCBhbnkgY2xhc3Mgd2l0aCBDb2dzLkpz
b25DbGFzcw0NDWBgYENPUw0NQ2xhc3MgRXhhbXBsZS5QZXJzb24gRXh0ZW5kcyAoJVBlcnNpc3Rl
bnQsIENvZ3MuSnNvbkNsYXNzKQ0New0NDVByb3BlcnR5IEZpcnN0TmFtZSBBcyAlU3RyaW5nOw0N
DVByb3BlcnR5IExhc3ROYW1lIEFzICVTdHJpbmc7DQ0NUHJvcGVydHkgRGF0ZU9mQmlydGggQXMg
JURhdGUoSlNPTk5BTUU9IkJpcnRoRGF0ZSIpOw0NDVByb3BlcnR5IFNlY3JldCBBcyAlU3RyaW5n
KEpTT05JR05PUkU9MSk7DQ0NUHJvcGVydHkgSG9iYmllcyBBcyBsaXN0IE9mICVTdHJpbmc7DQ0N
fQ0NYGBgDQ0NdGFrZSBzb21lIEpTT04NDQ1gYGBKU09ODQ17ICANDSAgICJCaXJ0aERhdGUiOiIx
OTcwLTAzLTI1IiwNDSAgICJGaXJzdE5hbWUiOiJTZWFuIiwNDSAgICJIb2JiaWVzIjpbICANDSAg
ICAgICJQaG90b2dyYXBoeSIsDQ0gICAgICAiV2Fsa2luZyIsDQ0gICAgICAiRm9vdGJhbGwiDQ0g
ICBdLA0NICAgIkxhc3ROYW1lIjoiQ29ubmVsbHkiDQ19DQ1gYGANDQ1wYXJzZSBhbmQgc2F2ZSBp
dA0NDWBgYENPUw0Nc2V0IHBlcnNvbj0jI2NsYXNzKEV4YW1wbGUuUGVyc29uKS5wYXJzZUpTT04o
anNvbikNDXNldCBzYz1wZXJzb24uJVNhdmUoKQ0NYGBgDQ0Nbm93IG9wZW4gdGhlIHBlcnNpc3Rl
bnQgb2JqZWN0IGFuZCBjYWxsIGl0cyB0b0pTT04oKSBtZXRob2QuLi4NDQ1gYGBDT1MNDXNldCBw
ZXJzb249IyNjbGFzcyhFeGFtcGxlLlBlcnNvbikuJU9wZW5JZCgxKQ0Nd3JpdGUgISxwZXJzb24u
dG9KU09OKCkNDWBgYA0NDWFuZCBpdHMgYXMgZWFzeSBhcyB0aGF0Li4uDQ0NYGBgSlNPTg0NeyJC
aXJ0aERhdGUiOiIxOTcwLTAzLTI1IiwiRmlyc3ROYW1lIjoiU2VhbiIsIkhvYmJpZXMiOlsiUGhv
dG9ncmFwaHkiLCJXYWxraW5nIiwiRm9vdGJhbGwiXSwiTGFzdE5hbWUiOiJDb25uZWxseSJ9DQ1g
YGANDQ0jIyMgTW90aXZhdGlvbg0NDVRvIHByb3ZpZGUgYSBvbmUgc3RlcCBzZXJpYWxpc2VyIGFu
ZCBkZXNlcmlhbGlzZXIgb2YgcmVnaXN0ZXJlZCBhbmQgcGVyc2lzdGVudCBjbGFzc2VzIHRoYXQg
d29ya3MgYWNyb3NzIGFsbCBtYWluc3RyZWFtIHZlcnNpb25zIG9mIENhY2jDqSBhbmQgRW5zZW1i
bGUuDQ0NIyMjIEluc3RhbGxhdGlvbg0NDUNsb25lIG9yIGRvd25sb2FkIHRoZSBwcm9qZWN0IGZy
b20gR3V0SHViLg0NDVRoZSBidWlsZCBmb2xkZXIgY29udGFpbnMgdGhlIG1vc3QgcmVjZW50IGJ1
aWxkIGZpbGUgYXMgYSBzaW5nbGUgaW1wb3J0Lg0NDUltcG9ydCB0aGUgZmlsZSBkaXJlY3RseSBp
bnRvIHRoZSBuYW1lc3BhY2UgdGhhdCB5b3Ugd2FudCB0byB1c2UgaXQgZnJvbSwgb3IgaW1wb3J0
IGl0IGludG8gYSBjZW50cmFsIG5hbWVzcGFjZSBhbmQgbWFwIHRoZSBDb2dzIHBhY2thZ2UgdG8g
dGhlIHJlcXVpcmVkIG5hbWVzcGFjZShzKS4NDQ0jIyMgRG9jdW1lbnRhdGlvbg0NDURvY3VtZW50
YXRpb24gY2FuIGJlIGZvdW5kIGluIHRoZSBkb2NzIGZvbGRlciBhbmQgaXMgY3VycmVudGx5IGJl
c3Qgdmlld2VkIG9uIHRoZSBtYWluIEdpdEh1YiBzaXRlLg0NDSMjIyBUZXN0cw0NDUNvcmUgdW5p
dCB0ZXN0cyBhcmUgaW5jbHVkZWQgaW4gdGhlIHRlc3QgZm9sZGVyLiBUaGVzZSB0ZXN0cyBhcmUg
ZGV2ZWxvcGVkIHVzaW5nIHRoZSBUb3VjaHN0b25lIHVuaXQgdGVzdCBzb2x1dGlvbi4gVW5mb3J0
dW5hdGVseSB5b3Ugd2lsbCBub3QgYmUgYWJsZSB0byBydW4gdGhlc2UgdGVzdHMgdW50aWwgVG91
Y2hzdG9uZSBoYXMgYmVlbiByZWxlYXNlZCAoaW4gdGhlIG5lYXIgZnV0dXJlKS4NDQ0jIyMgUmVs
ZWFzZSBOb3Rlcw0NDSogMS4wLjAgRmlyc3QgUmVsZWFzZQ0NKiAxLjAuMSBJbXByb3ZlIGRldGVj
dGlvbiBvZiByZWN1cnNpdmUgb2JqZWN0IHJlZmVyZW5jZXMNDSogMS4wLjIgSW1wcm92ZSBKU09O
IGVzY2FwZSBwZXJmb3JtYW5jZSBvbiBuZXdlciBpbnN0YW5jZXMgb2YgQ2FjaMOpLCBub3cgNyB0
aW1lcyBmYXN0ZXIgKyBGaXhlZCBDUiAmIExGIGVzY2FwaW5nICh3ZXJlIHdyb25nIHdheSByb3Vu
ZCkuDQ0qIDEuMC4zIEpTT04gc2VyaWFsaXNhdGlvbiBmYWlsZWQgZm9yIGEgbmVzdGVkIG9iamVj
dCB3aGVyZSB0aGUgbGFzdCBwcm9wZXJ0eSB3YXMgYSBsaXN0IC0gRml4ZWQuIE9wZW5lZCB1cCBi
b29sZWFuIGRlc2VyaWFsaXNhdGlvbiB0byBhY2NlcHQgMSBhbmQgMCBmb3IgYm9vbGVhbiBwcm9w
ZXJ0eSB0eXBlcyAod2FzIGp1c3QgdHJ1ZSBhbmQgZmFsc2UpLiBJbXByb3ZlZCBoYW5kbGluZyBv
ZiB3aGl0ZXNwYWNlIGJlZm9yZSBjZXJ0YWluIHZhbHVlIHR5cGVzLiBJbXByb3ZlZCAlVGltZXN0
YW1wIGhhbmRsaW5nLiBJbmNyZWFzZWQgdW5pdCB0ZXN0cy4NDSMjIyBMaWNlbnNlDQ0NVGhlIGNv
cmUgQ29ncyBsaWJyYXJ5IGlzIHJlbGVhc2VkIHVuZGVyIHRoZSBNUEwgMi4wIGxpY2Vuc2UuIFNl
ZSB0aGUgaW5jbHVkZWQgbGljZW5zZSBhZ3JlZW1lbnQgZm9yIG1vcmUgZGV0YWlscy4NDQ1NUEwg
Mi4wIGlzIGEgY29weWxlZnQgbGljZW5zZSB0aGF0IGlzIGVhc3kgdG8gY29tcGx5IHdpdGguIFlv
dSBtdXN0IG1ha2UgdGhlIHNvdXJjZSBjb2RlIGZvciBhbnkgZGlyZWN0IGNoYW5nZXMgdG8gdGhl
IENvZ3MgbGlicmFyeSBhdmFpbGFibGUgdW5kZXIgTVBMLiBZb3UgY2FuIGNvbWJpbmUgdGhlIENv
Z3MgbGlicmFyeSB3aXRoIHByb3ByaWV0YXJ5IGNvZGUgd2l0aG91dCB0aGUgY29weWxlZnQgbGlj
ZW5jZSBhZmZlY3RpbmcgdGhlIHByb3ByaWV0YXJ5IGNvZGUuICANDQ1Db3B5cmlnaHQgKGMpIDIw
MTcgTWVtQ29nIEx0ZA==</PageContents>
</object>
]]></Data>
</XData>
</Class>


<Class name="Cogs.Lib.Json.Params">
<TimeChanged>64441,33999.10585</TimeChanged>
<TimeCreated>64434,59065.087173</TimeCreated>

<Parameter name="JSONNAME">
<Type>%String</Type>
</Parameter>

<Parameter name="JSONIGNORE">
<Type>%Boolean</Type>
</Parameter>

<Parameter name="JSONMETHOD">
<Type>%String</Type>
</Parameter>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.ChildTestClass">
<Super>%Persistent,Cogs.JsonClass</Super>
<TimeChanged>64444,21572.643167</TimeChanged>
<TimeCreated>64441,50196.171549</TimeCreated>

<Property name="Parent">
<Type>Cogs.Lib.Json.Tests.JsonClass.ParentTestClass</Type>
</Property>

<Property name="SameParent">
<Type>Cogs.Lib.Json.Tests.JsonClass.ParentTestClass</Type>
</Property>

<Property name="Bar">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cogs.Lib.Js7A8C.ChildTestClassD</DataLocation>
<DefaultData>ChildTestClassDefaultData</DefaultData>
<IdLocation>^Cogs.Lib.Js7A8C.ChildTestClassD</IdLocation>
<IndexLocation>^Cogs.Lib.Js7A8C.ChildTestClassI</IndexLocation>
<StreamLocation>^Cogs.Lib.Js7A8C.ChildTestClassS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ChildTestClassDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Parent</Value>
</Value>
<Value name="3">
<Value>SameParent</Value>
</Value>
<Value name="4">
<Value>Bar</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass">
<Super>Cogs.JsonClass</Super>
<TimeChanged>64481,38834.597057</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="MandateListDto">
<Type>Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateTestClass</Type>
<Collection>list</Collection>
</Property>

<Property name="PageIndex">
<Type>%Integer</Type>
</Property>

<Property name="PageSize">
<Type>%Integer</Type>
</Property>

<Property name="ErrorList">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="ResponseUtcTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="UserFriendlyDisplayList">
<Type>%String</Type>
<Collection>list</Collection>
</Property>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateStatus">
<Super>Cogs.JsonClass</Super>
<TimeChanged>64481,36345.775033</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="Status">
<Type>%String</Type>
</Property>

<Property name="AuthenticationDate">
<Type>%TimeStamp</Type>
</Property>

<Property name="MandateBankReferenceNumber">
<Type>%String</Type>
</Property>

<Property name="RejectReasons">
<Type>%String</Type>
<Collection>list</Collection>
</Property>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateTestClass">
<Super>Cogs.JsonClass</Super>
<TimeChanged>64481,39664.54275</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="Id">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="CreationDateUtc">
<Type>%TimeStamp</Type>
</Property>

<Property name="MandateStatus">
<Type>Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateStatus</Type>
</Property>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.Issue4TestClass">
<Super>%Persistent,Cogs.JsonClass</Super>
<TimeChanged>64481,31541.001199</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="Child">
<Type>Cogs.Lib.Json.Tests.JsonClass.ChildTestClass</Type>
</Property>

<Property name="SameChild">
<Type>Cogs.Lib.Json.Tests.JsonClass.ChildTestClass</Type>
</Property>

<Property name="Foo">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cogs.Lib.J7A8C.Issue4TestCD18FD</DataLocation>
<DefaultData>Issue4TestClassDefaultData</DefaultData>
<IdLocation>^Cogs.Lib.J7A8C.Issue4TestCD18FD</IdLocation>
<IndexLocation>^Cogs.Lib.J7A8C.Issue4TestCD18FI</IndexLocation>
<StreamLocation>^Cogs.Lib.J7A8C.Issue4TestCD18FS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="Issue4TestClassDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Child</Value>
</Value>
<Value name="3">
<Value>SameChild</Value>
</Value>
<Value name="4">
<Value>Foo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest1">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Touchstone.TestClass</Super>
<TimeChanged>64445,41664.692191</TimeChanged>
<TimeCreated>64444,21420.443897</TimeCreated>

<Parameter name="TestSuiteName">
<Default>Cogs.Lib.JSON</Default>
</Parameter>

<Method name="Test1">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	for i=32:1:127 set all=$get(all)_$c(i)
	do ..AssertEquals(testObject1.TestAllAsciiChars,all,"Test all ASCII characters 1")
	do ..AssertEquals(testObject2.TestAllAsciiChars,all,"Test all ASCII characters 2")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match 1")
	do ..AssertNotEquals(testObject1.TestIgnoreFlag,testObject2.TestIgnoreFlag,"test TestIgnoreFlag property has been ignored 1")
	do ..AssertNotContains(json1,"TestIgnoreFlag","test TestIgnoreFlag property has been ignored 2")
	do ..AssertNotEquals(testObject1.ZTestJsonMethod,testObject2.ZTestJsonMethod,"test ZTestJsonMethod property has been overriden 1")
	do ..AssertEquals(testObject1.TestLongString,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?","Test long string is correct")
	do ..AssertContains(json1,"""ZTestJsonMethod"":""LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT, SED DO EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM, QUIS NOSTRUD EXERCITATION ULLAMCO LABORIS NISI UT ALIQUIP EX EA COMMODO CONSEQUAT. DUIS AUTE IRURE DOLOR IN REPREHENDERIT IN VOLUPTATE VELIT ESSE CILLUM DOLORE EU FUGIAT NULLA PARIATUR. EXCEPTEUR SINT OCCAECAT CUPIDATAT NON PROIDENT, SUNT IN CULPA QUI OFFICIA DESERUNT MOLLIT ANIM ID EST LABORUM. SED UT PERSPICIATIS UNDE OMNIS ISTE NATUS ERROR SIT VOLUPTATEM ACCUSANTIUM DOLOREMQUE LAUDANTIUM, TOTAM REM APERIAM, EAQUE IPSA QUAE AB ILLO INVENTORE VERITATIS ET QUASI ARCHITECTO BEATAE VITAE DICTA SUNT EXPLICABO. NEMO ENIM IPSAM VOLUPTATEM QUIA VOLUPTAS SIT ASPERNATUR AUT ODIT AUT FUGIT, SED QUIA CONSEQUUNTUR MAGNI DOLORES EOS QUI RATIONE VOLUPTATEM SEQUI NESCIUNT. NEQUE PORRO QUISQUAM EST, QUI DOLOREM IPSUM QUIA DOLOR SIT AMET, CONSECTETUR, ADIPISCI VELIT, SED QUIA NON NUMQUAM EIUS MODI TEMPORA INCIDUNT UT LABORE ET DOLORE MAGNAM ALIQUAM QUAERAT VOLUPTATEM. UT ENIM AD MINIMA VENIAM, QUIS NOSTRUM EXERCITATIONEM ULLAM CORPORIS SUSCIPIT LABORIOSAM, NISI UT ALIQUID EX EA COMMODI CONSEQUATUR? QUIS AUTEM VEL EUM IURE REPREHENDERIT QUI IN EA VOLUPTATE VELIT ESSE QUAM NIHIL MOLESTIAE CONSEQUATUR, VEL ILLUM QUI DOLOREM EUM FUGIAT QUO VOLUPTAS NULLA PARIATUR?""","Test ZTestJsonMethod is serialised correctly")
	do ..AssertContains(json1,"_id","test _id property name exists")
	do ..AssertEquals(testObject2.TestBooleanYes,1,"Test TestBooleanYes")
	do ..AssertEquals(testObject2.TestBooleanNo,0,"Test TestBooleanNo")
	do ..AssertEquals(testObject2.TestNotBoolean1,"true","Test TestNotBoolean1")
	do ..AssertEquals(testObject2.TestNotBoolean2,"false","Test TestNotBoolean2")
	do ..AssertEquals(testObject2.TestStringNotNull,"","Test TestStringNotNull")
	do ..AssertEquals(testObject2.TestNullString,$c(0),"Test TestNullString")
	do ..AssertEquals(testObject2.TestNullBoolean,"","Test TestNullBoolean")
	do ..AssertEquals(testObject1.TestNullInteger,"","Test TestNullInteger 1")
	do ..AssertEquals(testObject2.TestNullInteger,"","Test TestNullInteger 2")
	do ..AssertEquals(testObject2.TestNullDate,"","Test TestNullDate")
	do ..AssertEquals(testObject2.TestStringOfJSON,"{""menu"": { ""id"": ""file"", ""value"": ""File"", ""popup"": { ""menuitem"": [ {""value"": ""New"", ""onclick"": ""CreateNewdoc()""}, {""value"": ""Open"", ""onclick"": ""Opendoc()""}, {""value"": ""Close"", ""onclick"": ""Closedoc()""} ] }}}","Test TestStringOfJSON")
	do ..AssertEquals(testObject2.TestInteger,42,"Test TestInteger")
	do ..AssertEquals(testObject2.TestDate,+$H,"Test TestDate")
	do ..AssertEquals(testObject2.TestTimestamp,"1966-01-27 23:12:02","Test TestTimestamp")
	do ..AssertEquals(testObject2.TestTimestampShort,"1966-01-27 00:00:00","Test TestTimestampShort")
	do ..AssertEquals(testObject2.TestTime,4444,"Test TestTime")
	do ..AssertEquals(testObject2.TestEscapes,"\""\""/"""_$C(8,9,10,12,13),"Test TestEscapes")
	do ..AssertNotEquals(testObject2.TestIgnoreFlag,"WARNING, THIS IS PRIVATE AND SHOULD NOT BE SERIALISED INTO JSON!","Test TestIgnoreFlag 1")
	do ..AssertEquals(testObject2.TestIgnoreFlag,"","Test TestIgnoreFlag 2")
	do ..AssertEquals(testObject2.TestLongString,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?","Test TestLongString")
	do ..AssertEquals(testObject2.TestLongNumber,49947976805055875840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,"Test TestLongNumber")
	do ..AssertEquals(testObject2.TestString,"{[{\}[/][{[""FOO"","""""""""""""""""""""""""""""""""",""BAR""]}]{\}[/]]}","Test TestString")
	do ..AssertEquals(testObject1.ZTestJsonName,testObject2.ZTestJsonName,"Test JSON name change")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test2">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match with RAW JSON")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test3">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set testObject1.TestInteger=0.12345
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	do ..AssertEquals(testObject1.TestInteger,0.12345,"Test decimal number with leading zero 1")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test4">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set testObject1.TestInteger=.12345
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	do ..AssertEquals(testObject1.TestInteger,.12345,"Test decimal number with leading zero 2")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test5">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set testObject1.TestInteger=0
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match 2")
	do ..AssertEquals(testObject1.TestInteger,0,"Test zero value")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test6">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set testObject1.TestInteger="012345"
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	do ..AssertEquals(testObject1.TestInteger,"012345","Test leading zero value")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test7">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set checkObject=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	set checkJson=checkObject.toJSON()
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3()
	do ..AssertEquals(testObject1.toJSON(),testObject1.toJSON(),"Very large JSON object should match iteself")	
	set json1=testObject1.toJSON()
	#dim testObject2 as Cogs.Lib.Json.Tests.JsonClass.UberTestClass
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1)
	set json2=testObject2.TestSingleObject.toJSON()
	do ..AssertEquals(checkJson,json2,"Single object should match original")
	set json3=testObject2.TestListOfObject.GetAt(1).toJSON()
	do ..AssertEquals(checkJson,json3,"List object 1 should match original")
	set json4=testObject2.TestListOfObject.GetAt(2).toJSON()
	do ..AssertEquals(checkJson,json4,"List object 2 should match original")
	set json5=testObject2.TestListOfObject.GetAt(3).toJSON()
	do ..AssertEquals(checkJson,json5,"List object 3 should match original")
	set json6=testObject2.TestArrayOfObject.GetAt("ONE").toJSON()
	do ..AssertEquals(checkJson,json6,"Array object 1 should match original")
	set json7=testObject2.TestArrayOfObject.GetAt("TWO").toJSON()
	do ..AssertEquals(checkJson,json7,"Array object 2 should match original")
	set json8=testObject2.TestArrayOfObject.GetAt("THREE").toJSON()
	do ..AssertEquals(checkJson,json8,"Array object 3 should match original")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test8">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match with RAW JSON 2")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test9">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match with RAW JSON 3")
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest2">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Touchstone.TestClass</Super>
<TimeChanged>64447,48805.28569</TimeChanged>
<TimeCreated>64444,21448.02046</TimeCreated>

<Parameter name="TestSuiteName">
<Default>Cogs.Lib.JSON</Default>
</Parameter>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).%DeleteExtent()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Test1">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set person=##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).%New()
	set person.FirstName="Sean"
	set person.LastName="Connelly"
	set person.DateOfBirth=47379
	set person.Secret="Luna"
	do person.Hobbies.Insert("Photography")
	do person.Hobbies.Insert("Football")
	do person.Hobbies.Insert("Walking")
	set sc=person.%Save()
	do ..AssertEquals(sc,$$$OK,"person should save ok 1")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test2">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set person=##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).%OpenId(1)
	set json=person.toJSON()
	do ..AssertEquals(json,"{""BirthDate"":""1970-09-20"",""FirstName"":""Sean"",""Hobbies"":[""Photography"",""Football"",""Walking""],""LastName"":""Connelly""}","json string is correct")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test3">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set json="{""BirthDate"":""1970-09-20"",""FirstName"":""Sean"",""Hobbies"":[""Photography"",""Football"",""Walking""],""LastName"":""Connelly""}"
	set person=##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).parseJSON(json)
	set sc=person.%Save()
	do ..AssertEquals(sc,$$$OK,"person should save ok 1")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test4">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set person=##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).%OpenId(2)
	do ..AssertEquals(person.FirstName,"Sean","Test FirstName is correct")
	do ..AssertEquals(person.LastName,"Connelly","Test LastName is correct")
	do ..AssertEquals(person.DateOfBirth,47379,"Test DateOfBirth is correct")
	do ..AssertEquals(person.Hobbies.GetAt(1),"Photography","Test Hobbies 1 is correct")
	do ..AssertEquals(person.Hobbies.GetAt(2),"Football","Test Hobbies 2 is correct")
	do ..AssertEquals(person.Hobbies.GetAt(3),"Walking","Test Hobbies 3 is correct")
	do ..AssertEquals(person.Secret,"","Test Secret is empty")
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest3">
<Description>
Copyright (c) 2017 MemCog Ltd
Test fix for repeating object references</Description>
<Super>Cogs.Touchstone.TestClass</Super>
<TimeChanged>64444,21707.947675</TimeChanged>
<TimeCreated>64444,21462.377818</TimeCreated>

<Parameter name="TestSuiteName">
<Default>Cogs.Lib.JSON</Default>
</Parameter>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	do ##class(Cogs.Lib.Json.Tests.JsonClass.ChildTestClass).%DeleteExtent()
	do ##class(Cogs.Lib.Json.Tests.JsonClass.ParentTestClass).%DeleteExtent()
	
	//create parent
	set parent=##class(Cogs.Lib.Json.Tests.JsonClass.ParentTestClass).%New()
	set parent.Foo="World"
	set sc=parent.%Save()
	do ..AssertEquals(sc,$$$OK,"Parent should save")

	//create child
	set child=##class(Cogs.Lib.Json.Tests.JsonClass.ChildTestClass).%New()
	set child.Bar="Hello"
	set child.Parent=parent
	set child.SameParent=parent
	set sc=child.%Save()
	do ..AssertEquals(sc,$$$OK,"Child should save")
	
	//update parent
	set parent.Child=child
	set parent.SameChild=child
	set sc=parent.%Save()
	do ..AssertEquals(sc,$$$OK,"Parent should save")
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test1">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set parent=##class(Cogs.Lib.Json.Tests.JsonClass.ParentTestClass).%OpenId(1)
	set json=parent.toJSON()
	do ..AssertEquals(json,"{""Child"":{""Bar"":""Hello"",""Parent"":{},""SameParent"":{}},""Foo"":""World"",""SameChild"":{""Bar"":""Hello"",""Parent"":{},""SameParent"":{}}}","Should not fall into an infinite loop")
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest4">
<Description>
Copyright (c) 2017 MemCog Ltd
Test fix for repeating object references</Description>
<Super>Cogs.Touchstone.TestClass</Super>
<TimeChanged>64445,34601.950191</TimeChanged>
<TimeCreated>64444,21925.9056</TimeCreated>

<Parameter name="TestSuiteName">
<Default>Cogs.Lib.JSON</Default>
</Parameter>

<Method name="Test1">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	set json1=uber.toJSON()
	set json2=..GetOutputJson(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1())
	do ..AssertEquals(json1,json2,"outputJSON should equal toJSON 1")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test2">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	set json1=uber.toJSON()
	set json2=..GetOutputJson(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4())
	do ..AssertEquals(json1,json2,"outputJSON should equal toJSON 2")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test3">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject5()
	set json1=uber.toJSON()
	set json2=..GetOutputJson(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject5())
	do ..AssertEquals(json1,json2,"outputJSON should equal toJSON 3")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetOutputJson">
<FormalSpec>obj</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set tInitIO = $IO
    set %ISCJSONStream=##class(%Stream.TmpCharacter).%New()
    use tInitIO::("^%ZEN.Auxiliary.jsonProvider.1")
    do ##class(%Library.Device).ReDirectIO(1)
    do obj.outputJSON()
    if ##class(%Library.Device).ReDirectIO(0) Use tInitIO
    do %ISCJSONStream.Rewind()
    set string=%ISCJSONStream.Read($zutil(96,39))
    set ^debug($zh,"len")=$l(string)
    quit string
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest5">
<Description>
Copyright (c) 2017 MemCog Ltd
Test fix for repeating object references</Description>
<Super>Cogs.Touchstone.TestClass</Super>
<TimeChanged>64481,44919.800789</TimeChanged>
<TimeCreated>64481,29918.598871</TimeCreated>

<Parameter name="TestSuiteName">
<Default>Cogs.Lib.JSON</Default>
</Parameter>

<Method name="Test1">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set main=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).%New()
	set mandate=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateTestClass).%New()
	set mandateStatus=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateStatus).%New()
	set mandateStatus.Status="Rejected"
	set mandateStatus.AuthenticationDate="2017-07-15T00:00:00.0000000"
	set mandateStatus.MandateBankReferenceNumber=""
	do mandateStatus.RejectReasons.Insert("")
	set mandate.Id="40444019-fb52-40bd-82fa-be3d51a90ac8"
	set mandate.Name="TestDebtor"
	set mandate.CreationDateUtc="2017-07-15T08:25:59.6670000"
	set mandate.MandateStatus=mandateStatus
	do main.MandateListDto.Insert(mandate)
	set main.PageIndex=1
	set main.PageSize=1
	do main.ErrorList.Insert("")
	set main.ResponseUtcTime="2017-07-16T10:28:42.8798267"
	do main.UserFriendlyDisplayList.Insert("")
	set json1=main.toJSON()
	set main2=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).parseJSON(json1)
	set json2=main2.toJSON()
	do ..AssertEquals(json1,json2,"json should be the same")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test2">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set json="{""MandateListDto"": [{""Id"": ""40444019-fb52-40bd-82fa-be3d51a90ac8"",""Name"": ""TestDebtor"",""CreationDateUtc"": ""2017-07-15T08:25:59.6670000Z"",""MandateStatus"": {""Status"": ""Rejected"",""AuthenticationDate"": ""2017-07-15T00:00:00.0000000Z"",""MandateBankReferenceNumber"": ""123"",""RejectReasons"": [""Invalid""]}}],""PageIndex"": 1,""PageSize"": 1,""ErrorList"": [],""ResponseUtcTime"": ""2017-07-16T10:28:42.8798267Z"",""UserFriendlyDisplayList"": []}"
	#dim main as Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass
	set main=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).parseJSON(json)
	do ..AssertEquals(main.MandateListDto.GetAt(1).MandateStatus.Status,"Rejected","property value should match (1)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).MandateStatus.AuthenticationDate,"2017-07-15 00:00:00.0000000","property value should match (2)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).MandateStatus.MandateBankReferenceNumber,"123","property value should match (3)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).MandateStatus.RejectReasons.GetAt(1),"Invalid","property value should match (4)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).Id,"40444019-fb52-40bd-82fa-be3d51a90ac8","property value should match (5)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).Name,"TestDebtor","property value should match (6)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).CreationDateUtc,"2017-07-15 08:25:59.6670000","property value should match (7)")
	do ..AssertEquals(main.PageIndex,1,"property value should match (8)")
	do ..AssertEquals(main.PageSize,1,"property value should match (9)")
	do ..AssertEquals(main.ErrorList.Size,0,"property value should match (10)")
	do ..AssertEquals(main.ResponseUtcTime,"2017-07-16 10:28:42.8798267","property value should match (11)")
	do ..AssertEquals(main.UserFriendlyDisplayList.Size,0,"property value should match (12)")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test3">
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set json="{""MandateListDto"": [{""Id"": ""40444019-fb52-40bd-82fa-be3d51a90ac8"",""Name"": ""TestDebtor"",""CreationDateUtc"": ""2017-07-15T08:25:59.6670000Z"",""MandateStatus"": {""Status"": ""Rejected"",""AuthenticationDate"": ""2017-07-15T00:00:00.0000000Z"",""MandateBankReferenceNumber"": """",""RejectReasons"": [""""]}}],""PageIndex"": 1,""PageSize"": 1,""ErrorList"": [],""ResponseUtcTime"": ""2017-07-16T10:28:42.8798267Z"",""UserFriendlyDisplayList"": []}"
	set json2="{""ErrorList"":[],""MandateListDto"":[{""CreationDateUtc"":""2017-07-15T08:25:59.6670000Z"",""Id"":""40444019-fb52-40bd-82fa-be3d51a90ac8"",""MandateStatus"":{""AuthenticationDate"":""2017-07-15T00:00:00.0000000Z"",""MandateBankReferenceNumber"":"""",""RejectReasons"":[""""],""Status"":""Rejected""},""Name"":""TestDebtor""}],""PageIndex"":1,""PageSize"":1,""ResponseUtcTime"":""2017-07-16T10:28:42.8798267Z"",""UserFriendlyDisplayList"":[]}"
	#dim main as Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass
	set main=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).parseJSON(json)
	set json3=main.toJSON()
	do ..AssertEquals(json2,json3,"json should be the same")
	quit $$$OK
]]></Implementation>
</Method>
</Class>




<Class name="Cogs.Lib.Json.Tests.JsonClass.ParentTestClass">
<Super>%Persistent,Cogs.JsonClass</Super>
<TimeChanged>64444,21590.889479</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="Child">
<Type>Cogs.Lib.Json.Tests.JsonClass.ChildTestClass</Type>
</Property>

<Property name="SameChild">
<Type>Cogs.Lib.Json.Tests.JsonClass.ChildTestClass</Type>
</Property>

<Property name="Foo">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cogs.Lib.J7A8C.ParentTestC47A0D</DataLocation>
<DefaultData>ParentTestClassDefaultData</DefaultData>
<IdLocation>^Cogs.Lib.J7A8C.ParentTestC47A0D</IdLocation>
<IndexLocation>^Cogs.Lib.J7A8C.ParentTestC47A0I</IndexLocation>
<StreamLocation>^Cogs.Lib.J7A8C.ParentTestC47A0S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ParentTestClassDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Child</Value>
</Value>
<Value name="3">
<Value>SameChild</Value>
</Value>
<Value name="4">
<Value>Foo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.StoredTestClass">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%Persistent,Cogs.JsonClass</Super>
<TimeChanged>64444,21785.357232</TimeChanged>
<TimeCreated>64441,25043.859469</TimeCreated>

<Property name="FirstName">
<Type>%String</Type>
</Property>

<Property name="LastName">
<Type>%String</Type>
</Property>

<Property name="DateOfBirth">
<Type>%Date</Type>
<Parameter name="JSONNAME" value="BirthDate"/>
</Property>

<Property name="Secret">
<Type>%String</Type>
<Parameter name="JSONIGNORE" value="1"/>
</Property>

<Property name="Hobbies">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cogs.Lib.J7A8C.StoredTestCCBCAD</DataLocation>
<DefaultData>StoredTestClassDefaultData</DefaultData>
<IdLocation>^Cogs.Lib.J7A8C.StoredTestCCBCAD</IdLocation>
<IndexLocation>^Cogs.Lib.J7A8C.StoredTestCCBCAI</IndexLocation>
<StreamLocation>^Cogs.Lib.J7A8C.StoredTestCCBCAS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StoredTestClassDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FirstName</Value>
</Value>
<Value name="3">
<Value>LastName</Value>
</Value>
<Value name="4">
<Value>DateOfBirth</Value>
</Value>
<Value name="5">
<Value>Secret</Value>
</Value>
<Value name="6">
<Value>Hobbies</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.TestVeryLargeJsonObjectPage">
<Super>%CSP.Page</Super>
<TimeChanged>64445,41433.375079</TimeChanged>
<TimeCreated>64444,30573.906518</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set %response.ContentType="application/javascript; charset=utf-8;"
	quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	write ##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4().toJSON()
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.UberTestClass">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.JsonClass</Super>
<TimeChanged>64481,31755.035471</TimeChanged>
<TimeCreated>64444,21513.473079</TimeCreated>

<Property name="TestBooleanYes">
<Type>%Boolean</Type>
</Property>

<Property name="TestBooleanNo">
<Type>%Boolean</Type>
</Property>

<Property name="TestNotBoolean1">
<Type>%String</Type>
</Property>

<Property name="TestNotBoolean2">
<Type>%String</Type>
</Property>

<Property name="TestNullString">
<Type>%String</Type>
</Property>

<Property name="TestStringNotNull">
<Type>%String</Type>
</Property>

<Property name="TestNullBoolean">
<Type>%Boolean</Type>
</Property>

<Property name="TestNullInteger">
<Type>%Integer</Type>
</Property>

<Property name="TestNullDate">
<Type>%Date</Type>
</Property>

<Property name="TestNullTimestamp">
<Type>%TimeStamp</Type>
</Property>

<Property name="TestTime">
<Type>%Time</Type>
</Property>

<Property name="TestStringOfJSON">
<Type>%String</Type>
</Property>

<Property name="TestInteger">
<Type>%Integer</Type>
</Property>

<Property name="TestDate">
<Type>%Date</Type>
</Property>

<Property name="TestTimestamp">
<Type>%TimeStamp</Type>
</Property>

<Property name="TestTimestampShort">
<Type>%TimeStamp</Type>
</Property>

<Property name="TestEscapes">
<Type>%String</Type>
</Property>

<Property name="TestString">
<Type>%String</Type>
</Property>

<Property name="TestZero">
<Type>%Integer</Type>
</Property>

<Property name="TestRawJson">
<Type>Cogs.Lib.Types.Json</Type>
</Property>

<Property name="TestLongString">
<Type>%String</Type>
</Property>

<Property name="TestLongNumber">
<Type>%Integer</Type>
</Property>

<Property name="TestAllAsciiChars">
<Type>%String</Type>
</Property>

<Property name="TestListOfString">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="TestEmptyListOfString">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="TestListOfBoolean">
<Type>%Boolean</Type>
<Collection>list</Collection>
</Property>

<Property name="TestEmptyListOfBoolean">
<Type>%Boolean</Type>
<Collection>list</Collection>
</Property>

<Property name="TestListOfOfDate">
<Type>%Date</Type>
<Collection>list</Collection>
</Property>

<Property name="TestEmptyListOfOfDate">
<Type>%Date</Type>
<Collection>list</Collection>
</Property>

<Property name="TestListOfOfInteger">
<Type>%Integer</Type>
<Collection>list</Collection>
</Property>

<Property name="TestEmptyListOfOfInteger">
<Type>%Integer</Type>
<Collection>list</Collection>
</Property>

<Property name="TestArrayOfString">
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="TestEmptyArrayOfString">
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="TestArrayOfBoolean">
<Type>%Boolean</Type>
<Collection>array</Collection>
</Property>

<Property name="TestEmptyArrayOfBoolean">
<Type>%Boolean</Type>
<Collection>array</Collection>
</Property>

<Property name="TestArrayOfDate">
<Type>%Date</Type>
<Collection>array</Collection>
</Property>

<Property name="TestEmptyArrayOfDate">
<Type>%Date</Type>
<Collection>array</Collection>
</Property>

<Property name="TestArrayOfInteger">
<Type>%Integer</Type>
<Collection>array</Collection>
</Property>

<Property name="TestEmptyArrayOfInteger">
<Type>%Integer</Type>
<Collection>array</Collection>
</Property>

<Property name="TestSingleObject">
<Type>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</Type>
</Property>

<Property name="TestListOfObject">
<Type>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</Type>
<Collection>list</Collection>
</Property>

<Property name="TestArrayOfObject">
<Type>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</Type>
<Collection>array</Collection>
</Property>

<Property name="TestIgnoreFlag">
<Type>%String</Type>
<Parameter name="JSONIGNORE" value="1"/>
</Property>

<Property name="ZTestJsonName">
<Type>%String</Type>
<Parameter name="JSONNAME" value="_id"/>
</Property>

<Property name="ZTestJsonMethod">
<Type>%String</Type>
<Parameter name="JSONMETHOD" value="..ToUpper(..TestLongString)"/>
</Property>

<Method name="ToUpper">
<ClassMethod>1</ClassMethod>
<FormalSpec>pText:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $ZCVT(pText,"U")
]]></Implementation>
</Method>

<Method name="CreateTestObject1">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	set test=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).%New()
	set test.TestBooleanYes=1
	set test.TestBooleanNo=0
	set test.TestNotBoolean1="true"
	set test.TestNotBoolean2="false"
	set test.TestStringNotNull=""
	set test.TestNullString=$c(0)
	set test.TestNullBoolean=""
	set test.TestNullInteger=""
	set test.TestNullDate=""
	set test.TestStringOfJSON="{""menu"": { ""id"": ""file"", ""value"": ""File"", ""popup"": { ""menuitem"": [ {""value"": ""New"", ""onclick"": ""CreateNewdoc()""}, {""value"": ""Open"", ""onclick"": ""Opendoc()""}, {""value"": ""Close"", ""onclick"": ""Closedoc()""} ] }}}"
	set test.TestInteger=42
	set test.TestDate=+$H
	set test.TestTimestamp="1966-01-27 23:12:02"
	set test.TestTimestampShort="1966-01-27 00:00:00"
	set test.TestTime=4444
	set test.TestEscapes="\""\""/"""_$C(8,9,10,12,13)
	set test.TestIgnoreFlag="WARNING, THIS IS PRIVATE AND SHOULD NOT BE SERIALISED INTO JSON!"
	set test.TestLongString="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"
	set test.TestLongNumber=49947976805055875840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	set test.TestString="{[{\}[/][{[""FOO"","""""""""""""""""""""""""""""""""",""BAR""]}]{\}[/]]}"
	for i=32:1:127 set all=$get(all)_$c(i)
	set test.TestAllAsciiChars=all
	do test.TestListOfString.Insert("Sherlock Holmes")
	do test.TestListOfString.Insert("221B Baker Street")
	do test.TestListOfString.Insert("Marylebone")
	do test.TestListOfString.Insert("London W1")
	do test.TestListOfString.Insert("UK")
	do test.TestListOfString.Insert($c(0))
	do test.TestListOfString.Insert("{[{\}[/][{[FOO,BAR]}]{\}[/]]}")
	do test.TestListOfString.Insert("\""\""/"""_$C(8,9,10,12,13))
	do test.TestListOfString.Insert(0)
	do test.TestListOfString.Insert(1)
	do test.TestListOfString.Insert(345345345345345345354.00)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert("")
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfOfDate.Insert(0)
	do test.TestListOfOfDate.Insert(10)
	do test.TestListOfOfDate.Insert(100)
	do test.TestListOfOfDate.Insert(1000)
	do test.TestListOfOfDate.Insert("")
	do test.TestListOfOfDate.Insert(10000)
	do test.TestListOfOfDate.Insert(100000)
	do test.TestListOfOfDate.Insert(1000000)
	do test.TestListOfOfInteger.Insert(0)
	do test.TestListOfOfInteger.Insert(43564356546456)
	do test.TestListOfOfInteger.Insert(0.345)
	do test.TestListOfOfInteger.Insert(.2)
	do test.TestListOfOfInteger.Insert("")
	do test.TestListOfOfInteger.Insert(-464356.75675)
	do test.TestListOfOfInteger.Insert(76567)
	do test.TestListOfOfInteger.Insert(3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481)
	do test.TestListOfOfInteger.Insert(7653475667)
	do test.TestListOfOfInteger.Insert(-65753)
	do test.TestListOfOfInteger.Insert(45676.56)
	do test.TestListOfOfInteger.Insert(-78456/101+100*345/34.3)
	do test.TestArrayOfBoolean.SetAt(1,"ALPHA")
	do test.TestArrayOfBoolean.SetAt(0,"CHARLIE")
	do test.TestArrayOfBoolean.SetAt("","DELTA")
	do test.TestArrayOfBoolean.SetAt(0,"ECHO")
	do test.TestArrayOfBoolean.SetAt(1,"FOXTROT")
	do test.TestArrayOfString.SetAt("Sherlock Holmes","Detective")
	do test.TestArrayOfString.SetAt("221B Baker Street","Street")
	do test.TestArrayOfString.SetAt("Marylebone","District")
	do test.TestArrayOfString.SetAt("London W1","City")
	do test.TestArrayOfString.SetAt("UK","Country")
	do test.TestArrayOfString.SetAt("\""\""/"""_$C(8,9,10,12,13),"b4d,Th1ng5!")
	do test.TestArrayOfString.SetAt("{[{\}[/][{[FOO,BAR]}]{\}[/]]}","FOOBAR")
	do test.TestArrayOfString.SetAt($c(0),"nully")
	do test.TestArrayOfString.SetAt("","not-nully")
	do test.TestArrayOfDate.SetAt(0,"Happy-Horolog :)")
	do test.TestArrayOfDate.SetAt(+$H,"doB")
	do test.TestArrayOfDate.SetAt($H+40000,"doB")
	do test.TestArrayOfDate.SetAt("","nully")
	do test.TestArrayOfInteger.SetAt(1,"ONE")
	do test.TestArrayOfInteger.SetAt(2,"TWO")
	do test.TestArrayOfInteger.SetAt(3,"THREE")
	do test.TestArrayOfInteger.SetAt(99,"NINETY NINE")
	do test.TestArrayOfInteger.SetAt(1000,"A THOUSAND!")
	do test.TestArrayOfInteger.SetAt(59546526326827,"WORLD DEBT $")
	do test.TestArrayOfInteger.SetAt(241000000000000,"WORLD WORTH $")
	do test.TestArrayOfInteger.SetAt("","nully")
	set test.ZTestJsonName="FOO"
	Quit test
]]></Implementation>
</Method>

<Method name="CreateTestObject2">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	set test=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).%New()
	set test.TestBooleanYes=1
	set test.TestBooleanNo=0
	set test.TestNotBoolean1="true"
	set test.TestNotBoolean2="false"
	set test.TestStringNotNull=""
	set test.TestNullString=$c(0)
	set test.TestNullBoolean=""
	set test.TestNullInteger=""
	set test.TestNullDate=""
	set test.TestStringOfJSON="{""menu"": { ""id"": ""file"", ""value"": ""File"", ""popup"": { ""menuitem"": [ {""value"": ""New"", ""onclick"": ""CreateNewdoc()""}, {""value"": ""Open"", ""onclick"": ""Opendoc()""}, {""value"": ""Close"", ""onclick"": ""Closedoc()""} ] }}}"
	set test.TestInteger=42
	set test.TestDate=+$H
	set test.TestTimestamp="1966-01-27 23:12:02"
	set test.TestTimestampShort="1966-01-27 00:00:00"
	set test.TestTime=4444
	set test.TestEscapes="\""\""/"""_$C(8,9,10,12,13)
	set test.TestIgnoreFlag="WARNING, THIS IS PRIVATE AND SHOULD NOT BE SERIALISED INTO JSON!"
	set test.TestLongString="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"
	set test.TestLongNumber=49947976805055875840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	set test.TestString="{[{\}[/][{[""FOO"","""""""""""""""""""""""""""""""""",""BAR""]}]{\}[/]]}"
	set test.TestRawJson="{""TestAllAsciiChars"":"" !\""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"_$c(127)_""",""TestArrayOfBoolean"":{""ALPHA"":true,""CHARLIE"":false,""DELTA"":null,""ECHO"":false,""FOXTROT"":true},""TestArrayOfDate"":{""Happy-Horolog :)"":""1840-12-31"",""doB"":""2126-12-16"",""nully"":null},""TestArrayOfInteger"":{""A THOUSAND!"":1000,""NINETY NINE"":99,""ONE"":1,""THREE"":3,""TWO"":2,""WORLD DEBT $"":59546526326827,""WORLD WORTH $"":241000000000000,""nully"":null},""TestArrayOfObject"":{},""TestArrayOfString"":{""City"":""London W1"",""Country"":""UK"",""Detective"":""Sherlock Holmes"",""District"":""Marylebone"",""FOOBAR"":""{[{\\}[/][{[FOO,BAR]}]{\\}[/]]}"",""Street"":""221B Baker Street"",""b4d,Th1ng5!"":""\\\""\\\""/\""\b\t\n\f\r"",""not-nully"":"""",""nully"":null},""TestBooleanNo"":false,""TestBooleanYes"":true,""TestDate"":""2017-06-10"",""TestEmptyArrayOfBoolean"":{},""TestEmptyArrayOfDate"":{},""TestEmptyArrayOfInteger"":{},""TestEmptyArrayOfString"":{},""TestEmptyListOfBoolean"":[],""TestEmptyListOfOfDate"":[],""TestEmptyListOfOfInteger"":[],""TestEmptyListOfString"":[],""TestEscapes"":""\\\""\\\""/\""\b\t\n\f\r"",""TestInteger"":42,""TestListOfBoolean"":[true,false,false,null,true,false,true,true,false],""TestListOfObject"":[],""TestListOfOfDate"":[""1840-12-31"",""1841-01-10"",""1841-04-10"",""1843-09-27"",null,""1868-05-18"",""2114-10-16"",""4578-11-27""],""TestListOfOfInteger"":[""0"",43564356546456,0.345,0.2,null,-464356.75675,76567,3.141592653589793238,7653475667,-65753,45676.56,-6807.383887076754324],""TestListOfString"":[""Sherlock Holmes"",""221B Baker Street"",""Marylebone"",""London W1"",""UK"",null,""{[{\\}[/][{[FOO,BAR]}]{\\}[/]]}"",""\\\""\\\""/\""\b\t\n\f\r"",""0"",""1"",""345345345345345345400""],""TestLongNumber"":49947976805055875840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,""TestLongString"":""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"",""TestNotBoolean1"":""true"",""TestNotBoolean2"":""false"",""TestNullBoolean"":null,""TestNullDate"":null,""TestNullInteger"":null,""TestNullString"":null,""TestNullTimestamp"":null,""TestRawJson"":"""",""TestSingleObject"":"""",""TestString"":""{[{\\}[/][{[\""FOO\"",\""\""\""\""\""\""\""\""\""\""\""\""\""\""\""\""\"",\""BAR\""]}]{\\}[/]]}"",""TestStringNotNull"":"""",""TestStringOfJSON"":""{\""menu\"": { \""id\"": \""file\"", \""value\"": \""File\"", \""popup\"": { \""menuitem\"": [ {\""value\"": \""New\"", \""onclick\"": \""CreateNewdoc()\""}, {\""value\"": \""Open\"", \""onclick\"": \""Opendoc()\""}, {\""value\"": \""Close\"", \""onclick\"": \""Closedoc()\""} ] }}}"",""TestTime"":""01:14:04"",""TestTimestamp"":""1966-01-27T23:12:02"",""TestTimestampShort"":""1966-01-27T00:00:00"",""TestZero"":null,""ZTestJsonMethod"":""LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT, SED DO EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM, QUIS NOSTRUD EXERCITATION ULLAMCO LABORIS NISI UT ALIQUIP EX EA COMMODO CONSEQUAT. DUIS AUTE IRURE DOLOR IN REPREHENDERIT IN VOLUPTATE VELIT ESSE CILLUM DOLORE EU FUGIAT NULLA PARIATUR. EXCEPTEUR SINT OCCAECAT CUPIDATAT NON PROIDENT, SUNT IN CULPA QUI OFFICIA DESERUNT MOLLIT ANIM ID EST LABORUM. SED UT PERSPICIATIS UNDE OMNIS ISTE NATUS ERROR SIT VOLUPTATEM ACCUSANTIUM DOLOREMQUE LAUDANTIUM, TOTAM REM APERIAM, EAQUE IPSA QUAE AB ILLO INVENTORE VERITATIS ET QUASI ARCHITECTO BEATAE VITAE DICTA SUNT EXPLICABO. NEMO ENIM IPSAM VOLUPTATEM QUIA VOLUPTAS SIT ASPERNATUR AUT ODIT AUT FUGIT, SED QUIA CONSEQUUNTUR MAGNI DOLORES EOS QUI RATIONE VOLUPTATEM SEQUI NESCIUNT. NEQUE PORRO QUISQUAM EST, QUI DOLOREM IPSUM QUIA DOLOR SIT AMET, CONSECTETUR, ADIPISCI VELIT, SED QUIA NON NUMQUAM EIUS MODI TEMPORA INCIDUNT UT LABORE ET DOLORE MAGNAM ALIQUAM QUAERAT VOLUPTATEM. UT ENIM AD MINIMA VENIAM, QUIS NOSTRUM EXERCITATIONEM ULLAM CORPORIS SUSCIPIT LABORIOSAM, NISI UT ALIQUID EX EA COMMODI CONSEQUATUR? QUIS AUTEM VEL EUM IURE REPREHENDERIT QUI IN EA VOLUPTATE VELIT ESSE QUAM NIHIL MOLESTIAE CONSEQUATUR, VEL ILLUM QUI DOLOREM EUM FUGIAT QUO VOLUPTAS NULLA PARIATUR?"",""_id"":""FOO""}"
	for i=32:1:127 set all=$get(all)_$c(i)
	set test.TestAllAsciiChars=all
	do test.TestListOfString.Insert("Sherlock Holmes")
	do test.TestListOfString.Insert("221B Baker Street")
	do test.TestListOfString.Insert("Marylebone")
	do test.TestListOfString.Insert("London W1")
	do test.TestListOfString.Insert("UK")
	do test.TestListOfString.Insert($c(0))
	do test.TestListOfString.Insert("{[{\}[/][{[FOO,BAR]}]{\}[/]]}")
	do test.TestListOfString.Insert("\""\""/"""_$C(8,9,10,12,13))
	do test.TestListOfString.Insert(0)
	do test.TestListOfString.Insert(1)
	do test.TestListOfString.Insert(345345345345345345354.00)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert("")
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfOfDate.Insert(0)
	do test.TestListOfOfDate.Insert(10)
	do test.TestListOfOfDate.Insert(100)
	do test.TestListOfOfDate.Insert(1000)
	do test.TestListOfOfDate.Insert("")
	do test.TestListOfOfDate.Insert(10000)
	do test.TestListOfOfDate.Insert(100000)
	do test.TestListOfOfDate.Insert(1000000)
	do test.TestListOfOfInteger.Insert(0)
	do test.TestListOfOfInteger.Insert(43564356546456)
	do test.TestListOfOfInteger.Insert(0.345)
	do test.TestListOfOfInteger.Insert(.2)
	do test.TestListOfOfInteger.Insert("")
	do test.TestListOfOfInteger.Insert(-464356.75675)
	do test.TestListOfOfInteger.Insert(76567)
	do test.TestListOfOfInteger.Insert(3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481)
	do test.TestListOfOfInteger.Insert(7653475667)
	do test.TestListOfOfInteger.Insert(-65753)
	do test.TestListOfOfInteger.Insert(45676.56)
	do test.TestListOfOfInteger.Insert(-78456/101+100*345/34.3)
	do test.TestArrayOfBoolean.SetAt(1,"ALPHA")
	do test.TestArrayOfBoolean.SetAt(0,"CHARLIE")
	do test.TestArrayOfBoolean.SetAt("","DELTA")
	do test.TestArrayOfBoolean.SetAt(0,"ECHO")
	do test.TestArrayOfBoolean.SetAt(1,"FOXTROT")
	do test.TestArrayOfString.SetAt("Sherlock Holmes","Detective")
	do test.TestArrayOfString.SetAt("221B Baker Street","Street")
	do test.TestArrayOfString.SetAt("Marylebone","District")
	do test.TestArrayOfString.SetAt("London W1","City")
	do test.TestArrayOfString.SetAt("UK","Country")
	do test.TestArrayOfString.SetAt("\""\""/"""_$C(8,9,10,12,13),"b4d,Th1ng5!")
	do test.TestArrayOfString.SetAt("{[{\}[/][{[FOO,BAR]}]{\}[/]]}","FOOBAR")
	do test.TestArrayOfString.SetAt($c(0),"nully")
	do test.TestArrayOfString.SetAt("","not-nully")
	do test.TestArrayOfDate.SetAt(0,"Happy-Horolog :)")
	do test.TestArrayOfDate.SetAt(+$H,"doB")
	do test.TestArrayOfDate.SetAt($H+40000,"doB")
	do test.TestArrayOfDate.SetAt("","nully")
	do test.TestArrayOfInteger.SetAt(1,"ONE")
	do test.TestArrayOfInteger.SetAt(2,"TWO")
	do test.TestArrayOfInteger.SetAt(3,"THREE")
	do test.TestArrayOfInteger.SetAt(99,"NINETY NINE")
	do test.TestArrayOfInteger.SetAt(1000,"A THOUSAND!")
	do test.TestArrayOfInteger.SetAt(59546526326827,"WORLD DEBT $")
	do test.TestArrayOfInteger.SetAt(241000000000000,"WORLD WORTH $")
	do test.TestArrayOfInteger.SetAt("","nully")
	set test.ZTestJsonName="FOO"
	Quit test
]]></Implementation>
</Method>

<Method name="CreateTestObject3">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	#dim uber as Cogs.Lib.Json.Tests.JsonClass.UberTestClass
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	set uber.TestSingleObject=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1())
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1())
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1())
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1(),"ONE")
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1(),"TWO")
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1(),"THREE")
	quit uber
]]></Implementation>
</Method>

<Method name="CreateTestObject4">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	#dim uber as Cogs.Lib.Json.Tests.JsonClass.UberTestClass
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3()
	set uber.TestSingleObject=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3()
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3())
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3())
	//do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3())
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3(),"ONE")
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3(),"TWO")
	//do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3(),"THREE")
	quit uber
]]></Implementation>
</Method>

<Method name="CreateTestObject5">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	#dim uber as Cogs.Lib.Json.Tests.JsonClass.UberTestClass
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	set uber.TestSingleObject=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4())
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4())
	//do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4())
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4(),"ONE")
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4(),"TWO")
	//do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4(),"THREE")
	quit uber
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.Suite">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Touchstone.TestSuite</Super>
<TimeChanged>64441,34899.199048</TimeChanged>
<TimeCreated>64440,44933.498102</TimeCreated>

<Parameter name="TestSuiteName">
<Default>Cogs.Lib.JSON</Default>
</Parameter>
</Class>


<Class name="Cogs.Lib.Types.Json">
<Description>
Copyright (c) 2017 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%Library.String</Super>
<TimeChanged>64441,34947.243038</TimeChanged>
<TimeCreated>63993,33577.525468</TimeCreated>

<Parameter name="MAXLEN">
<Description>
The maximum number of characters the string can contain.</Description>
<Type>INTEGER</Type>
<Default>1000000</Default>
</Parameter>

<Method name="parseObject">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&json:%String,&p:%Integer=1,&l:%Integer=0]]></FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	set string="{"
	set qflag=0
	set count=1
	set previous=""
	while count>0
	{
		set char=$e(json,p)
		if char="""",previous'="\" set qflag='qflag
		if char="{",'qflag set count=count+1
		if char="}",'qflag set count=count-1
		set string=string_char
		set previous=char
		set p=p+1
	}
	quit string
]]></Implementation>
</Method>
</Class>


<Project name="JsonClass" LastModified="2017-07-17 15:41:32.455611">
  <Items>
    <ProjectItem name="Cogs.JsonClass" type="CLS"></ProjectItem>
    <ProjectItem name="Cogs.Lib.Json.Base" type="CLS"></ProjectItem>
    <ProjectItem name="Cogs.Lib.Json.ClassDeserializer" type="CLS"></ProjectItem>
    <ProjectItem name="Cogs.Lib.Json.ClassSerializer" type="CLS"></ProjectItem>
    <ProjectItem name="Cogs.Lib.Json.Docs" type="PKG"></ProjectItem>
    <ProjectItem name="Cogs.Lib.Json.Params" type="CLS"></ProjectItem>
    <ProjectItem name="Cogs.Lib.Json.Tests.JsonClass" type="PKG"></ProjectItem>
    <ProjectItem name="Cogs.Lib.Json.Tests.Suite" type="CLS"></ProjectItem>
    <ProjectItem name="Cogs.Lib.Types.Json" type="CLS"></ProjectItem>
  </Items>
</Project>
</Export>
