<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2018.1 (Build 184U)" ts="2019-07-17 17:36:39">
<Class name="Cogs.JsonClass">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<PropertyClass>Cogs.Lib.Json.Params</PropertyClass>
<Super>Cogs.Lib.Json.ClassSerializer,Cogs.Lib.Json.ClassDeserializer</Super>
<TimeChanged>65211,61778.411926</TimeChanged>
<TimeCreated>63949,41076.823273</TimeCreated>
</Class>


<Class name="Cogs.Lib.Json.Base">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>65211,61875.96079</TimeChanged>
<TimeCreated>63949,40322.004384</TimeCreated>

<Method name="EscapeJSON">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>string:%String,escapeSolidus:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set x=%code
	set hasJSON=0
	try {
		set hasJSON=($system.Version.GetMajor()>2015)||($system.Version.GetMajor()=2015&&$system.Version.GetMinor()=2)	
	} catch err {
	}
	if hasJSON {
		d x.WriteLine(" quit $zcvt(string,""O"",""JSON"")")
	} else {
		d x.WriteLine(" for i=1:1:$l(string) set char=$e(string,i) if ($ascii(char)<32)||(char="""""""")||(char=""\"") goto escape")
		d x.WriteLine(" quit string")
		d x.WriteLine("escape")
		d x.WriteLine(" set out=""""")
		d x.WriteLine(" for i=1:1:$l(string) {")
		d x.WriteLine(" 	set char=$e(string,i)")
		d x.WriteLine(" 	if char=""\"" set char=""\\""")
		d x.WriteLine(" 	if char="""""""" set char=""\""""""")
		d x.WriteLine(" 	if $ascii(char)<32 set char=$case($ascii(char),""0"":""\u0000"",""1"":""\u0001"",""2"":""\u0002"",""3"":""\u0003"",""4"":""\u0004"",""5"":""\u0005"",""6"":""\u0006"",""7"":""\u0007"",""8"":""\b"",""9"":""\t"",""10"":""\n"",""11"":""\u000B"",""12"":""\f"",""13"":""\r"",""14"":""\u000E"",""15"":""\u000F"",""16"":""\u0010"",""17"":""\u0011"",""18"":""\u0012"",""19"":""\u0013"",""20"":""\u0014"",""21"":""\u0015"",""22"":""\u0016"",""23"":""\u0017"",""24"":""\u0018"",""25"":""\u0019"",""26"":""\u001A"",""27"":""\u001B"",""28"":""\u001C"",""29"":""\u001D"",""30"":""\u001E"",""31"":""\u001F"")")
		d x.WriteLine(" 	set out=out_char")
		d x.WriteLine(" }")
		d x.WriteLine(" quit out")		
	}
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.ClassDeserializer">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>65211,61884.453177</TimeChanged>
<TimeCreated>63949,44964.56539</TimeCreated>

<Method name="parseJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&json:%String,wrapper:%String=""]]></FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[	quit ..parseObject(json,$find(json,"{",$s(wrapper'="":$f(json,wrapper),1:1)),$length(json))
]]></Implementation>
</Method>

<Method name="parseObject">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&json:%String,&p:%Integer=1,&l:%Integer=0]]></FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	set (c,pre,string,str,name,ctype,cname)="",ob=..%New()
	for p=p:1:l {
		set ct=$e(json,p) if ((ct=" ")||(ct'?1ANP)),'string continue
		set pre=c,c=ct
		if "\"=pre,c="u" set esc=##class(%xsd.hexBinary).XSDToLogical($e(json,p+3,p+4)),str=$e(str,1,$l(str)-1)_esc,p=p+4,(pre,c)="" continue
		if "\"=pre set str=$e(str,1,$l(str)-1)_$s("""/\"[c:c,c="b":$c(8),c="t":$c(9),c="r":$c(13),c="f":$c(12),1:$c(10)),(pre,c)="" continue
		if """"=c,"\"'=pre set string=$s(string:0,1:1) continue
		if string set str=str_c continue
		if ":"=c set name=$method(ob,"bakedJsonName",str),str="" continue
		if ("["=c),("]"=pre) set name="" continue
		if "{"=c {
			if ctype="" set ctype=$method(ob,"bakedCType",name)
			if "%Collection.ArrayOfDT"=ctype set cname=name continue
			if "%Collection.ListOfObj"=ctype set sc=$method($property(ob,cname),"Insert",$method(ob,"bakedDelegator",cname,.json,.p,.l)) continue
			if "%Collection.ArrayOfObj"=ctype,(cname'="") set sc=$method($property(ob,cname),"SetAt",$method(ob,"bakedDelegator",cname,.json,.p,.l),name) continue 
			if "%Collection.ArrayOfObj"=ctype,cname="" set cname=name continue
			set $property(ob,name)=$method(ob,"bakedDelegator",name,.json,.p,.l) continue
		}
		if ((c=",")!(c="}")!(c="]")) {
			if ((pre="}")||(pre="]")&&(c'="}")) continue
			if "%Collection.ListOfDT"=ctype {
				if '((pre="[")&&(c="]")) set sc=$method($property(ob,cname),"Insert",$method(ob,"normaliseValue",cname,str,pre=""""))
			} elseif "%Collection.ArrayOfDT"=ctype {
				if name'=cname set sc=$method($property(ob,cname),"SetAt",$method(ob,"normaliseValue",cname,str,pre=""""),name)
			} else {
				if str'="" if "{["'[pre set $property(ob,name)=$method(ob,"normaliseValue",name,str,pre="""")
			}
			if ("}"=c),(ctype="") g END
			if ("]"=c)!("}"=c) set (cname,ctype)=""
			set (name,str)="" continue
		}
		if "["=c set ctype=$method(ob,"bakedCType",name),cname=name,(name,str)="" continue
		if "}"=c quit
		set str=str_c
	}
END
	quit ob
]]></Implementation>
</Method>

<Method name="bakedDelegator">
<Internal>1</Internal>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[pname:%String,&json:%String,&p:%Integer,&l:%Integer]]></FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	for pc=1:1:%compiledclass.Properties.Count() {
		set pr=%compiledclass.Properties.GetAt(pc)
		if pr.Type?1A1.ANP do %code.WriteLine(" if """_pr.Name_"""=pname set p=p+1 quit ##class("_pr.Type_").parseObject(.json,.p,.l)")	
	}
	do %code.WriteLine(" quit """"")
	quit 1
]]></Implementation>
</Method>

<Method name="bakedCType">
<Internal>1</Internal>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pname:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	for pc=1:1:%compiledclass.Properties.Count() {
		set pr=%compiledclass.Properties.GetAt(pc)
		if (pr.Collection="array")!(pr.Collection="list") do %code.WriteLine(" if """_pr.Name_"""=pname quit """_pr.RuntimeType_"""")	
	}
	do %code.WriteLine(" quit """"")
	quit 1
]]></Implementation>
</Method>

<Method name="bakedJsonName">
<Internal>1</Internal>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pname:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	for pc=1:1:%compiledclass.Properties.Count() {
		set pr=%compiledclass.Properties.GetAt(pc)
		if pr.Parameters.GetAt("JSONNAME")'="" do %code.WriteLine(" if """_pr.Parameters.GetAt("JSONNAME")_"""=pname quit """_pr.Name_"""")
	}
	do %code.WriteLine(" quit pname")
	quit 1
]]></Implementation>
</Method>

<Method name="normaliseValue">
<Internal>1</Internal>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pname:%String,pval,quoted</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	for pc=1:1:%compiledclass.Properties.Count() {
		set pr=%compiledclass.Properties.GetAt(pc)
		if "%Library.String"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(quoted:pval,pval=""null"":$c(0),1:pval)")
		if "%Library.Date"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""null"":"""",1:$zdh($e(pval,1,10),3,,,,,,,$c(0)))")
		if "%Library.Time"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""null"":"""",1:$zth(pval))")
		if "%Library.TimeStamp"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""null"":"""",1:$p($tr(pval,""TZ"","" ""),""+""))")
		if "%Library.Boolean"=pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""true"":1,pval=""false"":0,""01""[pval:pval,1:"""")")
		if "%Library.Float %Library.Integer %Library.Numeric %Library.Currency"[pr.Type do %code.WriteLine(" if """_pr.Name_"""=pname quit $s(pval=""null"":"""",1:pval)")
	}
	do %code.WriteLine(" quit pval")
	quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.ClassSerializer">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Lib.Json.Base</Super>
<TimeChanged>65211,61892.875578</TimeChanged>
<TimeCreated>63949,44967.513209</TimeCreated>

<Method name="toJSON">
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[parent="",&seen=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set x=%code
	d x.WriteLine(" if $g(seen($THIS))=1 quit ""{}""")
	d x.WriteLine(" set seen($THIS)=1")
	d x.WriteLine(" if $g(parent)'="""" set j=""{""""""_parent_"""""":""")
	d x.WriteLine(" set j=$g(j)_""{""")
	set co="",cc=0
	for i=1:1:%compiledclass.Properties.Count() {
		set p=%compiledclass.Properties.GetAt(i),name=p.Name
		if p.Parameters.GetAt("JSONIGNORE")=1 continue
		if $e(p.Name)'?1A continue
		if p.RuntimeType="%Library.RelationshipObject" continue
		if cc>0 set co=","
		set cc=cc+1
		if p.Parameters.GetAt("JSONNAME")'="" set name=p.Parameters.GetAt("JSONNAME")
		if p.Parameters.GetAt("JSONMETHOD")'="" {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":""""""_"_p.Parameters.GetAt("JSONMETHOD")_"_""""""""")
			continue
		}
		if "%Collection.ArrayOfDT"=p.RuntimeType {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":{"",c2="""",key=.."_p.Name_".Next("""")")
			d x.WriteLine(" while key'="""" {")
			d x.WriteLine("  set value=.."_p.Name_".GetAt(key)")
			d x.WriteLine("  Set j=j_c2_""""""""_key_""""""""_"":""_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type)_")")
			d x.WriteLine("  set key=.."_p.Name_".Next(key),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" set j=j_""}""")
			continue						
		}
		if "%Collection.ArrayOfObj"=p.RuntimeType {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":{"",c2="""",key=.."_p.Name_".Next("""")")
			d x.WriteLine(" while key'="""" {")
			d x.WriteLine("  set o=.."_p.Name_".GetAt(key)")
			d x.WriteLine("   set j=j_c2_""""""""_key_""""""""_"":""_o.toJSON(,.seen),c2="",""")
			d x.WriteLine("  set key=.."_p.Name_".Next(key),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" set j=j_""}""")
			continue					
		}
		if "%Collection.ListOfDT"=p.RuntimeType {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":["",c2=""""")
			d x.WriteLine(" for i=1:1:.."_p.Name_".Count() {")
			d x.WriteLine("  set value=.."_p.Name_".GetAt(i)")
			d x.WriteLine("  set j=j_c2_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type)_"),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" set j=j_""]""")
			continue					
		}
		if "%Collection.ListOfObj"=p.RuntimeType {
			d x.WriteLine(" set j=j_"""_co_""""""_name_""""":["",c2=""""")
			d x.WriteLine(" for i=1:1:.."_p.Name_".Count() {")
			d x.WriteLine("  set obj=.."_p.Name_".GetAt(i)")
			d x.WriteLine("  set j=j_c2_obj.toJSON(,.seen),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" set j=j_""]""")
			continue					
		}
		d x.WriteLine(" set value=.."_p.Name)
		d x.WriteLine(" Set j=j_"""_co_""""""_name_""""":""_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type)_")")
	}
	d x.WriteLine(" set j=j_""}""")
	d x.WriteLine(" if $g(parent)'="""" set j=j_""}""")
	d x.WriteLine(" kill seen($THIS)")
	d x.WriteLine(" quit j")
	quit 1
]]></Implementation>
</Method>

<Method name="outputJSON">
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[parent="",&seen=""]]></FormalSpec>
<Implementation><![CDATA[
	set x=%code
	d x.WriteLine(" if $g(seen($THIS))=1 write ""{}""")
	d x.WriteLine(" set seen($THIS)=1")
	d x.WriteLine(" if $g(parent)'="""" write ""{""""""_parent_"""""":""")
	d x.WriteLine(" write ""{""")
	set co="",cc=0
	for i=1:1:%compiledclass.Properties.Count() {
		set p=%compiledclass.Properties.GetAt(i),name=p.Name
		if p.Parameters.GetAt("JSONIGNORE")=1 continue
		if $e(p.Name)'?1A continue
		if p.RuntimeType="%Library.RelationshipObject" continue
		if cc>0 set co=","
		set cc=cc+1
		if p.Parameters.GetAt("JSONNAME")'="" set name=p.Parameters.GetAt("JSONNAME")
		if p.Parameters.GetAt("JSONMETHOD")'="" {
			d x.WriteLine(" write """_co_""""""_name_""""":""""""_"_p.Parameters.GetAt("JSONMETHOD")_"_""""""""")
			continue
		}
		if "%Collection.ArrayOfDT"=p.RuntimeType {
			d x.WriteLine(" write """_co_""""""_name_""""":{"" set c2="""",key=.."_p.Name_".Next("""")")
			d x.WriteLine(" while key'="""" {")
			d x.WriteLine("  set value=.."_p.Name_".GetAt(key)")
			d x.WriteLine("  write c2_""""""""_key_""""""""_"":""_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type,1)_")")
			d x.WriteLine("  set key=.."_p.Name_".Next(key),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" write ""}""")
			continue						
		}
		if "%Collection.ArrayOfObj"=p.RuntimeType {
			d x.WriteLine(" write """_co_""""""_name_""""":{"" set c2="""",key=.."_p.Name_".Next("""")")
			d x.WriteLine(" while key'="""" {")
			d x.WriteLine("  set o=.."_p.Name_".GetAt(key)")
			d x.WriteLine("   write c2_""""""""_key_""""""""_"":"" write o.outputJSON(,.seen) set c2="",""")
			d x.WriteLine("  set key=.."_p.Name_".Next(key),c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" write ""}""")
			continue					
		}
		if "%Collection.ListOfDT"=p.RuntimeType {
			d x.WriteLine(" write """_co_""""""_name_""""":["" set c2=""""")
			d x.WriteLine(" for i=1:1:.."_p.Name_".Count() {")
			d x.WriteLine("  set value=.."_p.Name_".GetAt(i)")
			d x.WriteLine("  write c2_$s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type,1)_") set c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" write ""]""")
			continue					
		}
		if "%Collection.ListOfObj"=p.RuntimeType {
			d x.WriteLine(" write """_co_""""""_name_""""":["" set c2=""""")
			d x.WriteLine(" for i=1:1:.."_p.Name_".Count() {")
			d x.WriteLine("  set obj=.."_p.Name_".GetAt(i)")
			d x.WriteLine("  write c2 write obj.outputJSON(,.seen) set c2="",""")
			d x.WriteLine(" }")
			d x.WriteLine(" write ""]""")
			continue					
		}
		d x.WriteLine(" set value=.."_p.Name)
		d x.WriteLine(" write """_co_""""""_name_""""":"" write $s(value=$c(0):""null"",1:"_..getTypeWriter(p.Type,1)_")")
	}
	d x.WriteLine(" write ""}""")
	d x.WriteLine(" if $g(parent)'="""" write ""}""")
	d x.WriteLine(" kill seen($THIS)")
	d x.WriteLine(" quit """"")
	quit 1
]]></Implementation>
</Method>

<Method name="getTypeWriter">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>type,mode=0</FormalSpec>
<Implementation><![CDATA[
	set quotes=""""""""""
	if "Cogs.Lib.Types.Json"=type q "$Select(value'="""":value,1:"""""""""""")"
	if "%Library.Time"=type q "$s(value'="""":"_quotes_"_$zt(value)_"_quotes_",1:""null"")"
	if "%Library.Date"=type q "$s(value'="""":"_quotes_"_$zd(value,3)_"_quotes_",1:""null"")"
	if "%Library.TimeStamp"=type q "$s(value'="""":"_quotes_"_$tr(value,"" "",""T"")_""Z""_"_quotes_",1:""null"")"
	if "%Library.Boolean"=type q "$s(value=1:""true"",value=0:""false"",1:""null"")"
	if "%Library.Float %Library.Integer %Library.Numeric %Library.Currency"[type q "$s($e(value,1,2)=""0."":value,$e(value,1)=""."":""0""_value,""0""=$e(value,1):""""""""_value_"""""""",value'="""":+value,1:""null"")"
	if "%"=$e(type) q quotes_"_..EscapeJSON(value)_"_quotes
	if mode=1 quit "$s($IsObject(value):value.outputJSON(,.seen),value="""":$C(34,34),1:"_quotes_"_..EscapeJSON(value)_"_quotes_")"
	quit "$s($IsObject(value):value.toJSON(,.seen),value="""":$C(34,34),1:"_quotes_"_..EscapeJSON(value)_"_quotes_")"
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Params">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<TimeChanged>65211,61898.756221</TimeChanged>
<TimeCreated>64434,59065.087173</TimeCreated>

<Parameter name="JSONNAME">
<Type>%String</Type>
</Parameter>

<Parameter name="JSONIGNORE">
<Type>%Boolean</Type>
</Parameter>

<Parameter name="JSONMETHOD">
<Type>%String</Type>
</Parameter>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.ChildTestClass">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%Persistent,Cogs.JsonClass</Super>
<TimeChanged>65211,61814.674647</TimeChanged>
<TimeCreated>64441,50196.171549</TimeCreated>

<Property name="Parent">
<Type>Cogs.Lib.Json.Tests.JsonClass.ParentTestClass</Type>
</Property>

<Property name="SameParent">
<Type>Cogs.Lib.Json.Tests.JsonClass.ParentTestClass</Type>
</Property>

<Property name="Bar">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cogs.Lib.Js7A8C.ChildTestClassD</DataLocation>
<DefaultData>ChildTestClassDefaultData</DefaultData>
<IdLocation>^Cogs.Lib.Js7A8C.ChildTestClassD</IdLocation>
<IndexLocation>^Cogs.Lib.Js7A8C.ChildTestClassI</IndexLocation>
<StreamLocation>^Cogs.Lib.Js7A8C.ChildTestClassS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ChildTestClassDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Parent</Value>
</Value>
<Value name="3">
<Value>SameParent</Value>
</Value>
<Value name="4">
<Value>Bar</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.JsonClass</Super>
<TimeChanged>65211,61791.652053</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="MandateListDto">
<Type>Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateTestClass</Type>
<Collection>list</Collection>
</Property>

<Property name="PageIndex">
<Type>%Integer</Type>
</Property>

<Property name="PageSize">
<Type>%Integer</Type>
</Property>

<Property name="ErrorList">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="ResponseUtcTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="UserFriendlyDisplayList">
<Type>%String</Type>
<Collection>list</Collection>
</Property>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateStatus">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.JsonClass</Super>
<TimeChanged>65211,61798.261642</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="Status">
<Type>%String</Type>
</Property>

<Property name="AuthenticationDate">
<Type>%TimeStamp</Type>
</Property>

<Property name="MandateBankReferenceNumber">
<Type>%String</Type>
</Property>

<Property name="RejectReasons">
<Type>%String</Type>
<Collection>list</Collection>
</Property>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateTestClass">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.JsonClass</Super>
<TimeChanged>65211,61805.640441</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="Id">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="CreationDateUtc">
<Type>%TimeStamp</Type>
</Property>

<Property name="MandateStatus">
<Type>Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateStatus</Type>
</Property>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest1">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Lib.Json.Tests.Runner</Super>
<TimeChanged>65211,61819.900264</TimeChanged>
<TimeCreated>64444,21420.443897</TimeCreated>

<Method name="Test1">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	for i=0:1:127 set all=$get(all)_$c(i)
	do ..AssertEquals(testObject1.TestAllAsciiChars,all,"Test all ASCII characters 1")
	do ..AssertEquals(testObject2.TestAllAsciiChars,all,"Test all ASCII characters 2")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match 1")
	do ..AssertNotEquals(testObject1.TestIgnoreFlag,testObject2.TestIgnoreFlag,"test TestIgnoreFlag property has been ignored 1")
	do ..AssertNotContains(json1,"TestIgnoreFlag","test TestIgnoreFlag property has been ignored 2")
	do ..AssertNotEquals(testObject1.ZTestJsonMethod,testObject2.ZTestJsonMethod,"test ZTestJsonMethod property has been overriden 1")
	do ..AssertEquals(testObject1.TestLongString,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?","Test long string is correct")
	do ..AssertContains(json1,"""ZTestJsonMethod"":""LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT, SED DO EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM, QUIS NOSTRUD EXERCITATION ULLAMCO LABORIS NISI UT ALIQUIP EX EA COMMODO CONSEQUAT. DUIS AUTE IRURE DOLOR IN REPREHENDERIT IN VOLUPTATE VELIT ESSE CILLUM DOLORE EU FUGIAT NULLA PARIATUR. EXCEPTEUR SINT OCCAECAT CUPIDATAT NON PROIDENT, SUNT IN CULPA QUI OFFICIA DESERUNT MOLLIT ANIM ID EST LABORUM. SED UT PERSPICIATIS UNDE OMNIS ISTE NATUS ERROR SIT VOLUPTATEM ACCUSANTIUM DOLOREMQUE LAUDANTIUM, TOTAM REM APERIAM, EAQUE IPSA QUAE AB ILLO INVENTORE VERITATIS ET QUASI ARCHITECTO BEATAE VITAE DICTA SUNT EXPLICABO. NEMO ENIM IPSAM VOLUPTATEM QUIA VOLUPTAS SIT ASPERNATUR AUT ODIT AUT FUGIT, SED QUIA CONSEQUUNTUR MAGNI DOLORES EOS QUI RATIONE VOLUPTATEM SEQUI NESCIUNT. NEQUE PORRO QUISQUAM EST, QUI DOLOREM IPSUM QUIA DOLOR SIT AMET, CONSECTETUR, ADIPISCI VELIT, SED QUIA NON NUMQUAM EIUS MODI TEMPORA INCIDUNT UT LABORE ET DOLORE MAGNAM ALIQUAM QUAERAT VOLUPTATEM. UT ENIM AD MINIMA VENIAM, QUIS NOSTRUM EXERCITATIONEM ULLAM CORPORIS SUSCIPIT LABORIOSAM, NISI UT ALIQUID EX EA COMMODI CONSEQUATUR? QUIS AUTEM VEL EUM IURE REPREHENDERIT QUI IN EA VOLUPTATE VELIT ESSE QUAM NIHIL MOLESTIAE CONSEQUATUR, VEL ILLUM QUI DOLOREM EUM FUGIAT QUO VOLUPTAS NULLA PARIATUR?""","Test ZTestJsonMethod is serialised correctly")
	do ..AssertContains(json1,"_id","test _id property name exists")
	do ..AssertEquals(testObject2.TestBooleanYes,1,"Test TestBooleanYes")
	do ..AssertEquals(testObject2.TestBooleanNo,0,"Test TestBooleanNo")
	do ..AssertEquals(testObject2.TestNotBoolean1,"true","Test TestNotBoolean1")
	do ..AssertEquals(testObject2.TestNotBoolean2,"false","Test TestNotBoolean2")
	do ..AssertEquals(testObject2.TestStringNotNull,"","Test TestStringNotNull")
	do ..AssertEquals(testObject2.TestNullString,$c(0),"Test TestNullString")
	do ..AssertEquals(testObject2.TestNullBoolean,"","Test TestNullBoolean")
	do ..AssertEquals(testObject1.TestNullInteger,"","Test TestNullInteger 1")
	do ..AssertEquals(testObject2.TestNullInteger,"","Test TestNullInteger 2")
	do ..AssertEquals(testObject2.TestNullDate,"","Test TestNullDate")
	do ..AssertEquals(testObject2.TestStringOfJSON,"{""menu"": { ""id"": ""file"", ""value"": ""File"", ""popup"": { ""menuitem"": [ {""value"": ""New"", ""onclick"": ""CreateNewdoc()""}, {""value"": ""Open"", ""onclick"": ""Opendoc()""}, {""value"": ""Close"", ""onclick"": ""Closedoc()""} ] }}}","Test TestStringOfJSON")
	do ..AssertEquals(testObject2.TestInteger,42,"Test TestInteger")
	do ..AssertEquals(testObject2.TestDate,+$H,"Test TestDate")
	do ..AssertEquals(testObject2.TestTimestamp,"1966-01-27 23:12:02","Test TestTimestamp")
	do ..AssertEquals(testObject2.TestTimestampShort,"1966-01-27 00:00:00","Test TestTimestampShort")
	do ..AssertEquals(testObject2.TestTime,4444,"Test TestTime")
	do ..AssertEquals(testObject2.TestEscapes,"\""\""/"""_$C(8,9,10,12,13),"Test TestEscapes")
	do ..AssertNotEquals(testObject2.TestIgnoreFlag,"WARNING, THIS IS PRIVATE AND SHOULD NOT BE SERIALISED INTO JSON!","Test TestIgnoreFlag 1")
	do ..AssertEquals(testObject2.TestIgnoreFlag,"","Test TestIgnoreFlag 2")
	do ..AssertEquals(testObject2.TestLongString,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?","Test TestLongString")
	do ..AssertEquals(testObject2.TestLongNumber,49947976805055875840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,"Test TestLongNumber")
	do ..AssertEquals(testObject2.TestString,"{[{\}[/][{[""FOO"","""""""""""""""""""""""""""""""""",""BAR""]}]{\}[/]]}","Test TestString")
	do ..AssertEquals(testObject1.ZTestJsonName,testObject2.ZTestJsonName,"Test JSON name change")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match with RAW JSON")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test3">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set testObject1.TestInteger=0.12345
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	do ..AssertEquals(testObject1.TestInteger,0.12345,"Test decimal number with leading zero 1")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test4">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set testObject1.TestInteger=.12345
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	do ..AssertEquals(testObject1.TestInteger,.12345,"Test decimal number with leading zero 2")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test5">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set testObject1.TestInteger=0
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match 2")
	do ..AssertEquals(testObject1.TestInteger,0,"Test zero value")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test6">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject2()
	set testObject1.TestInteger="012345"
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	do ..AssertEquals(testObject1.TestInteger,"012345","Test leading zero value")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test7">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set checkObject=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	set checkJson=checkObject.toJSON()
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3()
	do ..AssertEquals(testObject1.toJSON(),testObject1.toJSON(),"Very large JSON object should match iteself")	
	set json1=testObject1.toJSON()
	#dim testObject2 as Cogs.Lib.Json.Tests.JsonClass.UberTestClass
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1)
	set json2=testObject2.TestSingleObject.toJSON()
	do ..AssertEquals(checkJson,json2,"Single object should match original")
	set json3=testObject2.TestListOfObject.GetAt(1).toJSON()
	do ..AssertEquals(checkJson,json3,"List object 1 should match original")
	set json4=testObject2.TestListOfObject.GetAt(2).toJSON()
	do ..AssertEquals(checkJson,json4,"List object 2 should match original")
	set json5=testObject2.TestListOfObject.GetAt(3).toJSON()
	do ..AssertEquals(checkJson,json5,"List object 3 should match original")
	set json6=testObject2.TestArrayOfObject.GetAt("TEST3.1").toJSON()
	do ..AssertEquals(checkJson,json6,"Array object 1 should match original")
	set json7=testObject2.TestArrayOfObject.GetAt("TEST3.2").toJSON()
	do ..AssertEquals(checkJson,json7,"Array object 2 should match original")
	set json8=testObject2.TestArrayOfObject.GetAt("TEST3.3").toJSON()
	do ..AssertEquals(checkJson,json8,"Array object 3 should match original")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test8">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match with RAW JSON 2")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test9">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set testObject1=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	set json1=testObject1.toJSON("data")
	set testObject2=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).parseJSON(json1,"data")
	set json2=testObject2.toJSON("data")
	do ..AssertEquals(json1,json2,"Test serialisation to de-serialisation and back again is an exact match with RAW JSON 3")
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest2">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Lib.Json.Tests.Runner</Super>
<TimeChanged>65211,61824.627896</TimeChanged>
<TimeCreated>64444,21448.02046</TimeCreated>

<Method name="OnBeforeAllTests">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).%DeleteExtent()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Test1">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set person=##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).%New()
	set person.FirstName="Sean"
	set person.LastName="Connelly"
	set person.DateOfBirth=47379
	set person.Secret="Luna"
	do person.Hobbies.Insert("Photography")
	do person.Hobbies.Insert("Football")
	do person.Hobbies.Insert("Walking")
	set sc=person.%Save()
	do ..AssertEquals(sc,$$$OK,"person should save ok 1")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set person=##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).%OpenId(1)
	set json=person.toJSON()
	do ..AssertEquals(json,"{""BirthDate"":""1970-09-20"",""FirstName"":""Sean"",""Hobbies"":[""Photography"",""Football"",""Walking""],""LastName"":""Connelly""}","json string is correct")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test3">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set json="{""BirthDate"":""1970-09-20"",""FirstName"":""Sean"",""Hobbies"":[""Photography"",""Football"",""Walking""],""LastName"":""Connelly""}"
	set person=##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).parseJSON(json)
	set sc=person.%Save()
	do ..AssertEquals(sc,$$$OK,"person should save ok 1")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test4">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set person=##class(Cogs.Lib.Json.Tests.JsonClass.StoredTestClass).%OpenId(1)
	do ..AssertEquals(person.FirstName,"Sean","Test FirstName is correct")
	do ..AssertEquals(person.LastName,"Connelly","Test LastName is correct")
	do ..AssertEquals(person.DateOfBirth,47379,"Test DateOfBirth is correct")
	do ..AssertEquals(person.Hobbies.GetAt(1),"Photography","Test Hobbies 1 is correct")
	do ..AssertEquals(person.Hobbies.GetAt(2),"Football","Test Hobbies 2 is correct")
	do ..AssertEquals(person.Hobbies.GetAt(3),"Walking","Test Hobbies 3 is correct")
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest3">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Lib.Json.Tests.Runner</Super>
<TimeChanged>65211,61829.659498</TimeChanged>
<TimeCreated>64444,21462.377818</TimeCreated>

<Method name="Test1">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	
	do ##class(Cogs.Lib.Json.Tests.JsonClass.ChildTestClass).%DeleteExtent()
	do ##class(Cogs.Lib.Json.Tests.JsonClass.ParentTestClass).%DeleteExtent()
	
	//create parent
	set parent=##class(Cogs.Lib.Json.Tests.JsonClass.ParentTestClass).%New()
	set parent.Foo="World"
	set sc=parent.%Save()
	do ..AssertEquals(sc,$$$OK,"Parent should save")

	//create child
	set child=##class(Cogs.Lib.Json.Tests.JsonClass.ChildTestClass).%New()
	set child.Bar="Hello"
	set child.Parent=parent
	set child.SameParent=parent
	set sc=child.%Save()
	do ..AssertEquals(sc,$$$OK,"Child should save")
	
	//update parent
	set parent.Child=child
	set parent.SameChild=child
	set sc=parent.%Save()
	do ..AssertEquals(sc,$$$OK,"Parent should save")
	
	set parent=##class(Cogs.Lib.Json.Tests.JsonClass.ParentTestClass).%OpenId(1)
	set json=parent.toJSON()
	do ..AssertEquals(json,"{""Child"":{""Bar"":""Hello"",""Parent"":{},""SameParent"":{}},""Foo"":""World"",""SameChild"":{""Bar"":""Hello"",""Parent"":{},""SameParent"":{}}}","Should not fall into an infinite loop")
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest4">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Lib.Json.Tests.Runner</Super>
<TimeChanged>65211,61836.079728</TimeChanged>
<TimeCreated>64444,21925.9056</TimeCreated>

<Method name="Test1">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	set json1=uber.toJSON()
	set json2=..GetOutputJson(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1())
	do ..AssertEquals(json1,json2,"outputJSON should equal toJSON 1")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	set json1=uber.toJSON()
	set json2=..GetOutputJson(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4())
	do ..AssertEquals(json1,json2,"outputJSON should equal toJSON 2")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test3">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject5()
	set json1=uber.toJSON()
	set json2=..GetOutputJson(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject5())
	do ..AssertEquals(json1,json2,"outputJSON should equal toJSON 3")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test4">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set json="{""MandateListDto"": [{""Id"": ""40444019-fb52-40bd-82fa-be3d51a90ac8"",""Name"": ""TestDebtor"",""CreationDateUtc"": ""2017-07-15T08:25:59.6670000Z"",""MandateStatus"": {""Status"": ""Rejected"",""AuthenticationDate"": ""2017-07-15T00:00:00.0000000Z"",""MandateBankReferenceNumber"": """",""RejectReasons"": [""""]}}],""PageIndex"": 1,""PageSize"": 1,""ErrorList"": [],""ResponseUtcTime"": ""2017-07-16T10:28:42.8798267Z"",""UserFriendlyDisplayList"": []}"
	set json2="{""ErrorList"":[],""MandateListDto"":[{""CreationDateUtc"":""2017-07-15T08:25:59.6670000Z"",""Id"":""40444019-fb52-40bd-82fa-be3d51a90ac8"",""MandateStatus"":{""AuthenticationDate"":""2017-07-15T00:00:00.0000000Z"",""MandateBankReferenceNumber"":"""",""RejectReasons"":[""""],""Status"":""Rejected""},""Name"":""TestDebtor""}],""PageIndex"":1,""PageSize"":1,""ResponseUtcTime"":""2017-07-16T10:28:42.8798267Z"",""UserFriendlyDisplayList"":[]}"
	#dim main as Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass
	set main=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).parseJSON(json)
	set json4=main.toJSON()
	set json5=..GetOutputJson(main)
	do ..AssertEquals(json2,json4,"json should be the same 2")
	do ..AssertEquals(json2,json5,"json should be the same 3")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetOutputJson">
<ClassMethod>1</ClassMethod>
<FormalSpec>obj</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set tInitIO = $IO
    set %ISCJSONStream=##class(%Stream.TmpCharacter).%New()
    use tInitIO::("^%ZEN.Auxiliary.jsonProvider.1")
    do ##class(%Library.Device).ReDirectIO(1)
    do obj.outputJSON()
    if ##class(%Library.Device).ReDirectIO(0) Use tInitIO
    do %ISCJSONStream.Rewind()
    set string=%ISCJSONStream.Read($zutil(96,39))
    quit string
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.JsonClassTest5">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.Lib.Json.Tests.Runner</Super>
<TimeChanged>65211,61842.504127</TimeChanged>
<TimeCreated>64481,29918.598871</TimeCreated>

<Method name="Test1">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set main=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).%New()
	set mandate=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateTestClass).%New()
	set mandateStatus=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MandateStatus).%New()
	set mandateStatus.Status="Rejected"
	set mandateStatus.AuthenticationDate="2017-07-15T00:00:00.0000000"
	set mandateStatus.MandateBankReferenceNumber=""
	do mandateStatus.RejectReasons.Insert("")
	set mandate.Id="40444019-fb52-40bd-82fa-be3d51a90ac8"
	set mandate.Name="TestDebtor"
	set mandate.CreationDateUtc="2017-07-15T08:25:59.6670000"
	set mandate.MandateStatus=mandateStatus
	do main.MandateListDto.Insert(mandate)
	set main.PageIndex=1
	set main.PageSize=1
	do main.ErrorList.Insert("")
	set main.ResponseUtcTime="2017-07-16T10:28:42.8798267"
	do main.UserFriendlyDisplayList.Insert("")
	set json1=main.toJSON()
	set main2=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).parseJSON(json1)
	set json2=main2.toJSON()
	do ..AssertEquals(json1,json2,"json should be the same")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set json="{""MandateListDto"": [{""Id"": ""40444019-fb52-40bd-82fa-be3d51a90ac8"",""Name"": ""TestDebtor"",""CreationDateUtc"": ""2017-07-15T08:25:59.6670000Z"",""MandateStatus"": {""Status"": ""Rejected"",""AuthenticationDate"": ""2017-07-15T00:00:00.0000000Z"",""MandateBankReferenceNumber"": ""123"",""RejectReasons"": [""Invalid""]}}],""PageIndex"": 1,""PageSize"": 1,""ErrorList"": [],""ResponseUtcTime"": ""2017-07-16T10:28:42.8798267Z"",""UserFriendlyDisplayList"": []}"
	#dim main as Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass
	set main=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).parseJSON(json)
	do ..AssertEquals(main.MandateListDto.GetAt(1).MandateStatus.Status,"Rejected","property value should match (1)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).MandateStatus.AuthenticationDate,"2017-07-15 00:00:00.0000000","property value should match (2)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).MandateStatus.MandateBankReferenceNumber,"123","property value should match (3)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).MandateStatus.RejectReasons.GetAt(1),"Invalid","property value should match (4)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).Id,"40444019-fb52-40bd-82fa-be3d51a90ac8","property value should match (5)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).Name,"TestDebtor","property value should match (6)")
	do ..AssertEquals(main.MandateListDto.GetAt(1).CreationDateUtc,"2017-07-15 08:25:59.6670000","property value should match (7)")
	do ..AssertEquals(main.PageIndex,1,"property value should match (8)")
	do ..AssertEquals(main.PageSize,1,"property value should match (9)")
	do ..AssertEquals(main.ErrorList.Size,0,"property value should match (10)")
	do ..AssertEquals(main.ResponseUtcTime,"2017-07-16 10:28:42.8798267","property value should match (11)")
	do ..AssertEquals(main.UserFriendlyDisplayList.Size,0,"property value should match (12)")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test3">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ReturnTypeParams>UNITTEST=1</ReturnTypeParams>
<Implementation><![CDATA[
	set json="{""MandateListDto"": [{""Id"": ""40444019-fb52-40bd-82fa-be3d51a90ac8"",""Name"": ""TestDebtor"",""CreationDateUtc"": ""2017-07-15T08:25:59.6670000Z"",""MandateStatus"": {""Status"": ""Rejected"",""AuthenticationDate"": ""2017-07-15T00:00:00.0000000Z"",""MandateBankReferenceNumber"": """",""RejectReasons"": [""""]}}],""PageIndex"": 1,""PageSize"": 1,""ErrorList"": [],""ResponseUtcTime"": ""2017-07-16T10:28:42.8798267Z"",""UserFriendlyDisplayList"": []}"
	set json2="{""ErrorList"":[],""MandateListDto"":[{""CreationDateUtc"":""2017-07-15T08:25:59.6670000Z"",""Id"":""40444019-fb52-40bd-82fa-be3d51a90ac8"",""MandateStatus"":{""AuthenticationDate"":""2017-07-15T00:00:00.0000000Z"",""MandateBankReferenceNumber"":"""",""RejectReasons"":[""""],""Status"":""Rejected""},""Name"":""TestDebtor""}],""PageIndex"":1,""PageSize"":1,""ResponseUtcTime"":""2017-07-16T10:28:42.8798267Z"",""UserFriendlyDisplayList"":[]}"
	#dim main as Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass
	set main=##class(Cogs.Lib.Json.Tests.JsonClass.Issue4.MainTestClass).parseJSON(json)
	set json3=main.toJSON()
	do ..AssertEquals(json2,json3,"json should be the same")
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.ParentTestClass">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%Persistent,Cogs.JsonClass</Super>
<TimeChanged>65211,61851.667528</TimeChanged>
<TimeCreated>64441,50202.333059</TimeCreated>

<Property name="Child">
<Type>Cogs.Lib.Json.Tests.JsonClass.ChildTestClass</Type>
</Property>

<Property name="SameChild">
<Type>Cogs.Lib.Json.Tests.JsonClass.ChildTestClass</Type>
</Property>

<Property name="Foo">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cogs.Lib.J7A8C.ParentTestC47A0D</DataLocation>
<DefaultData>ParentTestClassDefaultData</DefaultData>
<IdLocation>^Cogs.Lib.J7A8C.ParentTestC47A0D</IdLocation>
<IndexLocation>^Cogs.Lib.J7A8C.ParentTestC47A0I</IndexLocation>
<StreamLocation>^Cogs.Lib.J7A8C.ParentTestC47A0S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ParentTestClassDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Child</Value>
</Value>
<Value name="3">
<Value>SameChild</Value>
</Value>
<Value name="4">
<Value>Foo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.StoredTestClass">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%Persistent,Cogs.JsonClass</Super>
<TimeChanged>65211,61858.422326</TimeChanged>
<TimeCreated>64441,25043.859469</TimeCreated>

<Property name="FirstName">
<Type>%String</Type>
</Property>

<Property name="LastName">
<Type>%String</Type>
</Property>

<Property name="DateOfBirth">
<Type>%Date</Type>
<Parameter name="JSONNAME" value="BirthDate"/>
</Property>

<Property name="Secret">
<Type>%String</Type>
<Parameter name="JSONIGNORE" value="1"/>
</Property>

<Property name="Hobbies">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cogs.Lib.J7A8C.StoredTestCCBCAD</DataLocation>
<DefaultData>StoredTestClassDefaultData</DefaultData>
<IdLocation>^Cogs.Lib.J7A8C.StoredTestCCBCAD</IdLocation>
<IndexLocation>^Cogs.Lib.J7A8C.StoredTestCCBCAI</IndexLocation>
<StreamLocation>^Cogs.Lib.J7A8C.StoredTestCCBCAS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="StoredTestClassDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FirstName</Value>
</Value>
<Value name="3">
<Value>LastName</Value>
</Value>
<Value name="4">
<Value>DateOfBirth</Value>
</Value>
<Value name="5">
<Value>Secret</Value>
</Value>
<Value name="6">
<Value>Hobbies</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cogs.Lib.Json.Tests.JsonClass.UberTestClass">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>Cogs.JsonClass</Super>
<TimeChanged>65211,61863.608568</TimeChanged>
<TimeCreated>64444,21513.473079</TimeCreated>

<Property name="TestBooleanYes">
<Type>%Boolean</Type>
</Property>

<Property name="TestBooleanNo">
<Type>%Boolean</Type>
</Property>

<Property name="TestNotBoolean1">
<Type>%String</Type>
</Property>

<Property name="TestNotBoolean2">
<Type>%String</Type>
</Property>

<Property name="TestNullString">
<Type>%String</Type>
</Property>

<Property name="TestStringNotNull">
<Type>%String</Type>
</Property>

<Property name="TestNullBoolean">
<Type>%Boolean</Type>
</Property>

<Property name="TestNullInteger">
<Type>%Integer</Type>
</Property>

<Property name="TestNullDate">
<Type>%Date</Type>
</Property>

<Property name="TestNullTimestamp">
<Type>%TimeStamp</Type>
</Property>

<Property name="TestTime">
<Type>%Time</Type>
</Property>

<Property name="TestStringOfJSON">
<Type>%String</Type>
</Property>

<Property name="TestInteger">
<Type>%Integer</Type>
</Property>

<Property name="TestDate">
<Type>%Date</Type>
</Property>

<Property name="TestTimestamp">
<Type>%TimeStamp</Type>
</Property>

<Property name="TestTimestampShort">
<Type>%TimeStamp</Type>
</Property>

<Property name="TestEscapes">
<Type>%String</Type>
</Property>

<Property name="TestString">
<Type>%String</Type>
</Property>

<Property name="TestZero">
<Type>%Integer</Type>
</Property>

<Property name="TestRawJson">
<Type>Cogs.Lib.Types.Json</Type>
</Property>

<Property name="TestLongString">
<Type>%String</Type>
</Property>

<Property name="TestLongNumber">
<Type>%Integer</Type>
</Property>

<Property name="TestAllAsciiChars">
<Type>%String</Type>
</Property>

<Property name="TestListOfString">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="TestEmptyListOfString">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="TestListOfBoolean">
<Type>%Boolean</Type>
<Collection>list</Collection>
</Property>

<Property name="TestEmptyListOfBoolean">
<Type>%Boolean</Type>
<Collection>list</Collection>
</Property>

<Property name="TestListOfOfDate">
<Type>%Date</Type>
<Collection>list</Collection>
</Property>

<Property name="TestEmptyListOfOfDate">
<Type>%Date</Type>
<Collection>list</Collection>
</Property>

<Property name="TestListOfOfInteger">
<Type>%Integer</Type>
<Collection>list</Collection>
</Property>

<Property name="TestEmptyListOfOfInteger">
<Type>%Integer</Type>
<Collection>list</Collection>
</Property>

<Property name="TestArrayOfString">
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="TestEmptyArrayOfString">
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="TestArrayOfBoolean">
<Type>%Boolean</Type>
<Collection>array</Collection>
</Property>

<Property name="TestEmptyArrayOfBoolean">
<Type>%Boolean</Type>
<Collection>array</Collection>
</Property>

<Property name="TestArrayOfDate">
<Type>%Date</Type>
<Collection>array</Collection>
</Property>

<Property name="TestEmptyArrayOfDate">
<Type>%Date</Type>
<Collection>array</Collection>
</Property>

<Property name="TestArrayOfInteger">
<Type>%Integer</Type>
<Collection>array</Collection>
</Property>

<Property name="TestEmptyArrayOfInteger">
<Type>%Integer</Type>
<Collection>array</Collection>
</Property>

<Property name="TestSingleObject">
<Type>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</Type>
</Property>

<Property name="TestListOfObject">
<Type>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</Type>
<Collection>list</Collection>
</Property>

<Property name="TestArrayOfObject">
<Type>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</Type>
<Collection>array</Collection>
</Property>

<Property name="TestIgnoreFlag">
<Type>%String</Type>
<Parameter name="JSONIGNORE" value="1"/>
</Property>

<Property name="ZTestJsonName">
<Type>%String</Type>
<Parameter name="JSONNAME" value="_id"/>
</Property>

<Property name="ZTestJsonMethod">
<Type>%String</Type>
<Parameter name="JSONMETHOD" value="..ToUpper(..TestLongString)"/>
</Property>

<Method name="ToUpper">
<ClassMethod>1</ClassMethod>
<FormalSpec>pText:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $ZCVT(pText,"U")
]]></Implementation>
</Method>

<Method name="CreateTestObject1">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	set test=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).%New()
	set test.TestBooleanYes=1
	set test.TestBooleanNo=0
	set test.TestNotBoolean1="true"
	set test.TestNotBoolean2="false"
	set test.TestStringNotNull=""
	set test.TestNullString=$c(0)
	set test.TestNullBoolean=""
	set test.TestNullInteger=""
	set test.TestNullDate=""
	set test.TestStringOfJSON="{""menu"": { ""id"": ""file"", ""value"": ""File"", ""popup"": { ""menuitem"": [ {""value"": ""New"", ""onclick"": ""CreateNewdoc()""}, {""value"": ""Open"", ""onclick"": ""Opendoc()""}, {""value"": ""Close"", ""onclick"": ""Closedoc()""} ] }}}"
	set test.TestInteger=42
	set test.TestDate=+$H
	set test.TestTimestamp="1966-01-27 23:12:02"
	set test.TestTimestampShort="1966-01-27 00:00:00"
	set test.TestTime=4444
	set test.TestEscapes="\""\""/"""_$C(8,9,10,12,13)
	set test.TestIgnoreFlag="WARNING, THIS IS PRIVATE AND SHOULD NOT BE SERIALISED INTO JSON!"
	set test.TestLongString="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"
	set test.TestLongNumber=49947976805055875840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	set test.TestString="{[{\}[/][{[""FOO"","""""""""""""""""""""""""""""""""",""BAR""]}]{\}[/]]}"
	for i=0:1:127 set all=$get(all)_$c(i)
	set test.TestAllAsciiChars=all
	do test.TestListOfString.Insert("Sherlock Holmes")
	do test.TestListOfString.Insert("221B Baker Street")
	do test.TestListOfString.Insert("Marylebone")
	do test.TestListOfString.Insert("London W1")
	do test.TestListOfString.Insert("UK")
	do test.TestListOfString.Insert($c(0))
	do test.TestListOfString.Insert("{[{\}[/][{[FOO,BAR]}]{\}[/]]}")
	do test.TestListOfString.Insert("\""\""/"""_$C(8,9,10,12,13))
	do test.TestListOfString.Insert(0)
	do test.TestListOfString.Insert(1)
	do test.TestListOfString.Insert(345345345345345345354.00)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert("")
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfOfDate.Insert(0)
	do test.TestListOfOfDate.Insert(10)
	do test.TestListOfOfDate.Insert(100)
	do test.TestListOfOfDate.Insert(1000)
	do test.TestListOfOfDate.Insert("")
	do test.TestListOfOfDate.Insert(10000)
	do test.TestListOfOfDate.Insert(100000)
	do test.TestListOfOfDate.Insert(1000000)
	do test.TestListOfOfInteger.Insert(0)
	do test.TestListOfOfInteger.Insert(43564356546456)
	do test.TestListOfOfInteger.Insert(0.345)
	do test.TestListOfOfInteger.Insert(.2)
	do test.TestListOfOfInteger.Insert("")
	do test.TestListOfOfInteger.Insert(-464356.75675)
	do test.TestListOfOfInteger.Insert(76567)
	do test.TestListOfOfInteger.Insert(3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481)
	do test.TestListOfOfInteger.Insert(7653475667)
	do test.TestListOfOfInteger.Insert(-65753)
	do test.TestListOfOfInteger.Insert(45676.56)
	do test.TestListOfOfInteger.Insert(-78456/101+100*345/34.3)
	do test.TestArrayOfBoolean.SetAt(1,"ALPHA")
	do test.TestArrayOfBoolean.SetAt(0,"CHARLIE")
	do test.TestArrayOfBoolean.SetAt("","DELTA")
	do test.TestArrayOfBoolean.SetAt(0,"ECHO")
	do test.TestArrayOfBoolean.SetAt(1,"FOXTROT")
	do test.TestArrayOfString.SetAt("Sherlock Holmes","Detective")
	do test.TestArrayOfString.SetAt("221B Baker Street","Street")
	do test.TestArrayOfString.SetAt("Marylebone","District")
	do test.TestArrayOfString.SetAt("London W1","City")
	do test.TestArrayOfString.SetAt("UK","Country")
	do test.TestArrayOfString.SetAt("\""\""/"""_$C(8,9,10,12,13),"b4d,Th1ng5!")
	do test.TestArrayOfString.SetAt("{[{\}[/][{[FOO,BAR]}]{\}[/]]}","FOOBAR")
	do test.TestArrayOfString.SetAt($c(0),"nully")
	do test.TestArrayOfString.SetAt("","not-nully")
	do test.TestArrayOfDate.SetAt(0,"Happy-Horolog :)")
	do test.TestArrayOfDate.SetAt(+$H,"doB")
	do test.TestArrayOfDate.SetAt($H+40000,"doB")
	do test.TestArrayOfDate.SetAt("","nully")
	do test.TestArrayOfInteger.SetAt(1,"ONE")
	do test.TestArrayOfInteger.SetAt(2,"TWO")
	do test.TestArrayOfInteger.SetAt(3,"THREE")
	do test.TestArrayOfInteger.SetAt(99,"NINETY NINE")
	do test.TestArrayOfInteger.SetAt(1000,"A THOUSAND!")
	do test.TestArrayOfInteger.SetAt(59546526326827,"WORLD DEBT $")
	do test.TestArrayOfInteger.SetAt(241000000000000,"WORLD WORTH $")
	do test.TestArrayOfInteger.SetAt("","nully")
	set test.ZTestJsonName="FOO"
	Quit test
]]></Implementation>
</Method>

<Method name="CreateTestObject2">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	set test=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).%New()
	set test.TestBooleanYes=1
	set test.TestBooleanNo=0
	set test.TestNotBoolean1="true"
	set test.TestNotBoolean2="false"
	set test.TestStringNotNull=""
	set test.TestNullString=$c(0)
	set test.TestNullBoolean=""
	set test.TestNullInteger=""
	set test.TestNullDate=""
	set test.TestStringOfJSON="{""menu"": { ""id"": ""file"", ""value"": ""File"", ""popup"": { ""menuitem"": [ {""value"": ""New"", ""onclick"": ""CreateNewdoc()""}, {""value"": ""Open"", ""onclick"": ""Opendoc()""}, {""value"": ""Close"", ""onclick"": ""Closedoc()""} ] }}}"
	set test.TestInteger=42
	set test.TestDate=+$H
	set test.TestTimestamp="1966-01-27 23:12:02"
	set test.TestTimestampShort="1966-01-27 00:00:00"
	set test.TestTime=4444
	set test.TestEscapes="\""\""/"""_$C(8,9,10,12,13)
	set test.TestIgnoreFlag="WARNING, THIS IS PRIVATE AND SHOULD NOT BE SERIALISED INTO JSON!"
	set test.TestLongString="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"
	set test.TestLongNumber=49947976805055875840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	set test.TestString="{[{\}[/][{[""FOO"","""""""""""""""""""""""""""""""""",""BAR""]}]{\}[/]]}"
	set test.TestRawJson="{""TestAllAsciiChars"":"" !\""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"_$c(127)_""",""TestArrayOfBoolean"":{""ALPHA"":true,""CHARLIE"":false,""DELTA"":null,""ECHO"":false,""FOXTROT"":true},""TestArrayOfDate"":{""Happy-Horolog :)"":""1840-12-31"",""doB"":""2126-12-16"",""nully"":null},""TestArrayOfInteger"":{""A THOUSAND!"":1000,""NINETY NINE"":99,""ONE"":1,""THREE"":3,""TWO"":2,""WORLD DEBT $"":59546526326827,""WORLD WORTH $"":241000000000000,""nully"":null},""TestArrayOfObject"":{},""TestArrayOfString"":{""City"":""London W1"",""Country"":""UK"",""Detective"":""Sherlock Holmes"",""District"":""Marylebone"",""FOOBAR"":""{[{\\}[/][{[FOO,BAR]}]{\\}[/]]}"",""Street"":""221B Baker Street"",""b4d,Th1ng5!"":""\\\""\\\""/\""\b\t\n\f\r"",""not-nully"":"""",""nully"":null},""TestBooleanNo"":false,""TestBooleanYes"":true,""TestDate"":""2017-06-10"",""TestEmptyArrayOfBoolean"":{},""TestEmptyArrayOfDate"":{},""TestEmptyArrayOfInteger"":{},""TestEmptyArrayOfString"":{},""TestEmptyListOfBoolean"":[],""TestEmptyListOfOfDate"":[],""TestEmptyListOfOfInteger"":[],""TestEmptyListOfString"":[],""TestEscapes"":""\\\""\\\""/\""\b\t\n\f\r"",""TestInteger"":42,""TestListOfBoolean"":[true,false,false,null,true,false,true,true,false],""TestListOfObject"":[],""TestListOfOfDate"":[""1840-12-31"",""1841-01-10"",""1841-04-10"",""1843-09-27"",null,""1868-05-18"",""2114-10-16"",""4578-11-27""],""TestListOfOfInteger"":[""0"",43564356546456,0.345,0.2,null,-464356.75675,76567,3.141592653589793238,7653475667,-65753,45676.56,-6807.383887076754324],""TestListOfString"":[""Sherlock Holmes"",""221B Baker Street"",""Marylebone"",""London W1"",""UK"",null,""{[{\\}[/][{[FOO,BAR]}]{\\}[/]]}"",""\\\""\\\""/\""\b\t\n\f\r"",""0"",""1"",""345345345345345345400""],""TestLongNumber"":49947976805055875840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,""TestLongString"":""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"",""TestNotBoolean1"":""true"",""TestNotBoolean2"":""false"",""TestNullBoolean"":null,""TestNullDate"":null,""TestNullInteger"":null,""TestNullString"":null,""TestNullTimestamp"":null,""TestRawJson"":"""",""TestSingleObject"":"""",""TestString"":""{[{\\}[/][{[\""FOO\"",\""\""\""\""\""\""\""\""\""\""\""\""\""\""\""\""\"",\""BAR\""]}]{\\}[/]]}"",""TestStringNotNull"":"""",""TestStringOfJSON"":""{\""menu\"": { \""id\"": \""file\"", \""value\"": \""File\"", \""popup\"": { \""menuitem\"": [ {\""value\"": \""New\"", \""onclick\"": \""CreateNewdoc()\""}, {\""value\"": \""Open\"", \""onclick\"": \""Opendoc()\""}, {\""value\"": \""Close\"", \""onclick\"": \""Closedoc()\""} ] }}}"",""TestTime"":""01:14:04"",""TestTimestamp"":""1966-01-27T23:12:02"",""TestTimestampShort"":""1966-01-27T00:00:00"",""TestZero"":null,""ZTestJsonMethod"":""LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT, SED DO EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM, QUIS NOSTRUD EXERCITATION ULLAMCO LABORIS NISI UT ALIQUIP EX EA COMMODO CONSEQUAT. DUIS AUTE IRURE DOLOR IN REPREHENDERIT IN VOLUPTATE VELIT ESSE CILLUM DOLORE EU FUGIAT NULLA PARIATUR. EXCEPTEUR SINT OCCAECAT CUPIDATAT NON PROIDENT, SUNT IN CULPA QUI OFFICIA DESERUNT MOLLIT ANIM ID EST LABORUM. SED UT PERSPICIATIS UNDE OMNIS ISTE NATUS ERROR SIT VOLUPTATEM ACCUSANTIUM DOLOREMQUE LAUDANTIUM, TOTAM REM APERIAM, EAQUE IPSA QUAE AB ILLO INVENTORE VERITATIS ET QUASI ARCHITECTO BEATAE VITAE DICTA SUNT EXPLICABO. NEMO ENIM IPSAM VOLUPTATEM QUIA VOLUPTAS SIT ASPERNATUR AUT ODIT AUT FUGIT, SED QUIA CONSEQUUNTUR MAGNI DOLORES EOS QUI RATIONE VOLUPTATEM SEQUI NESCIUNT. NEQUE PORRO QUISQUAM EST, QUI DOLOREM IPSUM QUIA DOLOR SIT AMET, CONSECTETUR, ADIPISCI VELIT, SED QUIA NON NUMQUAM EIUS MODI TEMPORA INCIDUNT UT LABORE ET DOLORE MAGNAM ALIQUAM QUAERAT VOLUPTATEM. UT ENIM AD MINIMA VENIAM, QUIS NOSTRUM EXERCITATIONEM ULLAM CORPORIS SUSCIPIT LABORIOSAM, NISI UT ALIQUID EX EA COMMODI CONSEQUATUR? QUIS AUTEM VEL EUM IURE REPREHENDERIT QUI IN EA VOLUPTATE VELIT ESSE QUAM NIHIL MOLESTIAE CONSEQUATUR, VEL ILLUM QUI DOLOREM EUM FUGIAT QUO VOLUPTAS NULLA PARIATUR?"",""_id"":""FOO""}"
	for i=0:1:127 set all=$get(all)_$c(i)
	set test.TestAllAsciiChars=all
	do test.TestListOfString.Insert("Sherlock Holmes")
	do test.TestListOfString.Insert("221B Baker Street")
	do test.TestListOfString.Insert("Marylebone")
	do test.TestListOfString.Insert("London W1")
	do test.TestListOfString.Insert("UK")
	do test.TestListOfString.Insert($c(0))
	do test.TestListOfString.Insert("{[{\}[/][{[FOO,BAR]}]{\}[/]]}")
	do test.TestListOfString.Insert("\""\""/"""_$C(8,9,10,12,13))
	do test.TestListOfString.Insert(0)
	do test.TestListOfString.Insert(1)
	do test.TestListOfString.Insert(345345345345345345354.00)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert("")
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(1)
	do test.TestListOfBoolean.Insert(0)
	do test.TestListOfOfDate.Insert(0)
	do test.TestListOfOfDate.Insert(10)
	do test.TestListOfOfDate.Insert(100)
	do test.TestListOfOfDate.Insert(1000)
	do test.TestListOfOfDate.Insert("")
	do test.TestListOfOfDate.Insert(10000)
	do test.TestListOfOfDate.Insert(100000)
	do test.TestListOfOfDate.Insert(1000000)
	do test.TestListOfOfInteger.Insert(0)
	do test.TestListOfOfInteger.Insert(43564356546456)
	do test.TestListOfOfInteger.Insert(0.345)
	do test.TestListOfOfInteger.Insert(.2)
	do test.TestListOfOfInteger.Insert("")
	do test.TestListOfOfInteger.Insert(-464356.75675)
	do test.TestListOfOfInteger.Insert(76567)
	do test.TestListOfOfInteger.Insert(3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481)
	do test.TestListOfOfInteger.Insert(7653475667)
	do test.TestListOfOfInteger.Insert(-65753)
	do test.TestListOfOfInteger.Insert(45676.56)
	do test.TestListOfOfInteger.Insert(-78456/101+100*345/34.3)
	do test.TestArrayOfBoolean.SetAt(1,"ALPHA")
	do test.TestArrayOfBoolean.SetAt(0,"CHARLIE")
	do test.TestArrayOfBoolean.SetAt("","DELTA")
	do test.TestArrayOfBoolean.SetAt(0,"ECHO")
	do test.TestArrayOfBoolean.SetAt(1,"FOXTROT")
	do test.TestArrayOfString.SetAt("Sherlock Holmes","Detective")
	do test.TestArrayOfString.SetAt("221B Baker Street","Street")
	do test.TestArrayOfString.SetAt("Marylebone","District")
	do test.TestArrayOfString.SetAt("London W1","City")
	do test.TestArrayOfString.SetAt("UK","Country")
	do test.TestArrayOfString.SetAt("\""\""/"""_$C(8,9,10,12,13),"b4d,Th1ng5!")
	do test.TestArrayOfString.SetAt("{[{\}[/][{[FOO,BAR]}]{\}[/]]}","FOOBAR")
	do test.TestArrayOfString.SetAt($c(0),"nully")
	do test.TestArrayOfString.SetAt("","not-nully")
	do test.TestArrayOfDate.SetAt(0,"Happy-Horolog :)")
	do test.TestArrayOfDate.SetAt(+$H,"doB")
	do test.TestArrayOfDate.SetAt($H+40000,"doB")
	do test.TestArrayOfDate.SetAt("","nully")
	do test.TestArrayOfInteger.SetAt(1,"ONE")
	do test.TestArrayOfInteger.SetAt(2,"TWO")
	do test.TestArrayOfInteger.SetAt(3,"THREE")
	do test.TestArrayOfInteger.SetAt(99,"NINETY NINE")
	do test.TestArrayOfInteger.SetAt(1000,"A THOUSAND!")
	do test.TestArrayOfInteger.SetAt(59546526326827,"WORLD DEBT $")
	do test.TestArrayOfInteger.SetAt(241000000000000,"WORLD WORTH $")
	do test.TestArrayOfInteger.SetAt("","nully")
	set test.ZTestJsonName="FOO"
	Quit test
]]></Implementation>
</Method>

<Method name="CreateTestObject3">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	#dim uber as Cogs.Lib.Json.Tests.JsonClass.UberTestClass
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	set uber.TestSingleObject=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1()
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1())
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1())
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1())
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1(),"TEST3.1")
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1(),"TEST3.2")
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject1(),"TEST3.3")
	quit uber
]]></Implementation>
</Method>

<Method name="CreateTestObject4">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	#dim uber as Cogs.Lib.Json.Tests.JsonClass.UberTestClass
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3()
	set uber.TestSingleObject=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3()
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3())
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3())
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3())
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3(),"TEST4.1")
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3(),"TEST4.2")
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject3(),"TEST4.3")
	quit uber
]]></Implementation>
</Method>

<Method name="CreateTestObject5">
<ClassMethod>1</ClassMethod>
<ReturnType>Cogs.Lib.Json.Tests.JsonClass.UberTestClass</ReturnType>
<Implementation><![CDATA[
	#dim uber as Cogs.Lib.Json.Tests.JsonClass.UberTestClass
	set uber=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	set uber.TestSingleObject=##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4()
	do uber.TestListOfObject.Insert(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4())
	do uber.TestArrayOfObject.SetAt(##class(Cogs.Lib.Json.Tests.JsonClass.UberTestClass).CreateTestObject4(),"TEST5.1")
	quit uber
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Json.Tests.Runner">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>65211,61870.031519</TimeChanged>
<TimeCreated>65211,58165.358218</TimeCreated>

<Method name="RunAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	kill ^CacheTemp.CogsJsonTests($Job)
	&sql(declare cur1 cursor for
	     select parent, Name 
	     into :className, :methodName
	     From %Dictionary.CompiledMethod
		 where parent in (
    	 	select ID from %Dictionary.CompiledClass
    	 	where ID like 'Cogs%' and Super = 'Cogs.Lib.Json.Tests.Runner'
	 	 ) and
		 ReturnTypeParams like '%UNITTEST=1%'
	)
	&sql(open cur1)
	&sql(fetch cur1)
	while SQLCODE=0 {
		set sc=$classmethod(className,methodName)
		&sql(fetch cur1)
	}
	&sql(close cur1)
	write !!
	write !,$get(^CacheTemp.CogsJsonTests($Job,"PASS"),0)," PASSES"
	write !,$get(^CacheTemp.CogsJsonTests($Job,"FAILED"),0)," FAILURES"
	if $get(^CacheTemp.CogsJsonTests($Job,"FAILED"),0)>0 {
		write !!,"See ^CacheTemp.CogsJsonTests(",$Job,",""FAILED"") for a list of failures"	
	}
]]></Implementation>
</Method>

<Method name="AssertEquals">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVal1,pVal2,pDesc=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if pVal1 = pVal2 {
		set ^CacheTemp.CogsJsonTests($Job,"PASS")=$get(^CacheTemp.CogsJsonTests($Job,"PASS"))+1	
	} else {
		set ^CacheTemp.CogsJsonTests($Job,"FAILED")=$get(^CacheTemp.CogsJsonTests($Job,"FAILED"))+1
		set ^CacheTemp.CogsJsonTests($Job,"FAILURES",$I(^CacheTemp.CogsJsonTests($Job,"FAILURES")))="Failure in "_..%ClassName(1)_" ("_pDesc_") values do not match..."_$c(13,10,13,10)_pVal1_$c(13,10,13,10)_pVal2_$c(13,10,13,10)
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AssertNotEquals">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVal1,pVal2,pDesc=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if pVal1 '= pVal2 {
		set ^CacheTemp.CogsJsonTests($Job,"PASS")=$get(^CacheTemp.CogsJsonTests($Job,"PASS"))+1	
	} else {
		set ^CacheTemp.CogsJsonTests($Job,"FAILED")=$get(^CacheTemp.CogsJsonTests($Job,"FAILED"))+1
		set ^CacheTemp.CogsJsonTests($Job,"FAILURES",$I(^CacheTemp.CogsJsonTests($Job,"FAILURES")))="Failure in "_..%ClassName(1)_" ("_pDesc_") values do not match..."_$c(13,10,13,10)_pVal1_$c(13,10,13,10)_pVal2_$c(13,10,13,10)
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AssertContains">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVal1,pVal2,pDesc=""</FormalSpec>
<Implementation><![CDATA[
	if pVal1 [ pVal2 {
		set ^CacheTemp.CogsJsonTests($Job,"PASS")=$get(^CacheTemp.CogsJsonTests($Job,"PASS"))+1	
	} else {
		set ^CacheTemp.CogsJsonTests($Job,"FAILED")=$get(^CacheTemp.CogsJsonTests($Job,"FAILED"))+1
		set ^CacheTemp.CogsJsonTests($Job,"FAILURES",$I(^CacheTemp.CogsJsonTests($Job,"FAILURES")))="Failure in "_..%ClassName(1)_" ("_pDesc_") values do not match..."_$c(13,10,13,10)_pVal1_$c(13,10,13,10)_pVal2_$c(13,10,13,10)
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AssertNotContains">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVal1,pVal2,pDesc=""</FormalSpec>
<Implementation><![CDATA[
	if pVal1 '[ pVal2 {
		set ^CacheTemp.CogsJsonTests($Job,"PASS")=$get(^CacheTemp.CogsJsonTests($Job,"PASS"))+1	
	} else {
		set ^CacheTemp.CogsJsonTests($Job,"FAILED")=$get(^CacheTemp.CogsJsonTests($Job,"FAILED"))+1
		set ^CacheTemp.CogsJsonTests($Job,"FAILURES",$I(^CacheTemp.CogsJsonTests($Job,"FAILURES")))="Failure in "_..%ClassName(1)_" ("_pDesc_") values do not match..."_$c(13,10,13,10)_pVal1_$c(13,10,13,10)_pVal2_$c(13,10,13,10)
	}
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Types.Json">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%Library.String</Super>
<TimeChanged>65211,61906.82658</TimeChanged>
<TimeCreated>63993,33577.525468</TimeCreated>

<Parameter name="MAXLEN">
<Description>
The maximum number of characters the string can contain.</Description>
<Type>INTEGER</Type>
<Default>3000000</Default>
</Parameter>

<Method name="parseObject">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&json:%String,&p:%Integer=1,&l:%Integer=0]]></FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	set string="{"
	set qflag=0
	set count=1
	set previous=""
	while count>0
	{
		set char=$e(json,p)
		if char="""",previous'="\" set qflag='qflag
		if char="{",'qflag set count=count+1
		if char="}",'qflag set count=count-1
		set string=string_char
		set previous=char
		set p=p+1
	}
	quit string
]]></Implementation>
</Method>
</Class>


<Class name="Cogs.Lib.Util.ExportProject">
<Description>
Copyright (c) 2019 MemCog Ltd
Set GitHub documentation for help</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>65211,63394.248729</TimeChanged>
<TimeCreated>65211,61583.293211</TimeCreated>

<Method name="Export">
<ClassMethod>1</ClassMethod>
<FormalSpec>pProjectName:%String,pVersion:%String="",pRootFolder:%String="D:\projects\cache\Cogs"</FormalSpec>
<Implementation><![CDATA[
	set sc=$$$OK
	set key=""
	set del=$s($zv["Windows":"\",1:"/")
	if $e(pRootFolder,$l(pRootFolder))'=del set pRootFolder=pRootFolder_del
	set sc=##class(%File).RemoveDirectoryTree(pRootFolder_"tests")
	set sc=##class(%File).CreateDirectoryChain(pRootFolder_"tests")
	set sc=##class(%File).RemoveDirectoryTree(pRootFolder_"src")
	set sc=##class(%File).CreateDirectoryChain(pRootFolder_"src")
	set sc=##class(%File).CreateDirectoryChain(pRootFolder_"build\")
	set project=##class(%Studio.Project).%OpenId(pProjectName)
	set item=project.Items.GetNext(.key)
	while key'="" {
		if item.Type="CLS" {
			set sc=..ExportClass(item.Name,pRootFolder)
			if $$$ISERR(sc) goto exit
		} else {
			kill spec
			set spec($i(spec))=item.Name_"*"
			set sc=..ListClasses(.spec,.list)
			if $$$ISERR(sc) goto exit
			set className=$order(list(""))
			while className'="" {
				set sc=..ExportClass(className,pRootFolder)
				if $$$ISERR(sc) goto exit
				set className=$order(list(className))
			}
		}
		set item=project.Items.GetNext(.key)
	}
	set buildFile=pRootFolder_"build"_del_pProjectName_pVersion_".xml"
	set sc=project.Export(buildFile)
exit
	quit sc
]]></Implementation>
</Method>

<Method name="ExportClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String,pRootFolder:%String</FormalSpec>
<Implementation><![CDATA[
	set del=$s($zv["Windows":"\",1:"/")
	if pClassName[".Tests." {
		set fileFolder=pRootFolder_"tests"_del_$tr($p(pClassName,".",1,$l(pClassName,".")-1),".",del)_del
	} else {
		set fileFolder=pRootFolder_"src"_del_$tr($p(pClassName,".",1,$l(pClassName,".")-1),".",del)_del
	}
	set fileName=fileFolder_pClassName_".cls"
	set sc=##class(%File).CreateDirectoryChain(fileFolder)
	quit ##class(%Compiler.UDL.TextServices).GetTextAsFile(,pClassName,fileName)
]]></Implementation>
</Method>

<Method name="ListClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>spec,*classes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill classes
	set classes=0
	if spec=0 quit $$$OK
	set a="",sql="select Name from %Dictionary.CompiledClass where "
	for i=1:1:spec {
		if $extract(spec(i))="-" {
			set sql=sql_a_"ID NOT Like '"_$replace($extract(spec(i),2,500),"*","%")_"'"			
		} else {
			set sql=sql_a_"ID Like '"_$replace(spec(i),"*","%")_"'"
		}
		set a=" and "
	}
	set rs=..Execute(.sc,sql) $$$QuitOnError(sc)
	while rs.Next() { set classes(rs.Get("Name"))="",classes=classes+1 }
	quit sc
]]></Implementation>
</Method>

<Method name="Execute">
<ClassMethod>1</ClassMethod>
<FormalSpec>*sc:%Status,pSql:%String,pArgs...</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
	set sc=rs.Prepare(pSql) $$$QuitOnError(sc)
	set sc=rs.Execute(pArgs...) $$$QuitOnError(sc)
	Quit rs
]]></Implementation>
</Method>
</Class>




<Project name="JsonClass" LastModified="2019-07-17 17:08:38.896427">
  <Items>
    <ProjectItem name="Cogs" type="PKG"></ProjectItem>
  </Items>
</Project>
</Export>
